sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
pi
3/4*pi
3/2*pi
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
q()
library(Rcpp)
library(RcppAlphahull)
n = 35
set.seed(353)
x = runif(n)
y = runif(n)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
alpha = 0.1
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
plot(asR, wpoints = T)
plot(ascpp, wpoints = T, col = c("red","black"))
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(vorR, number = T, wpoints = F, wlines = "vor", col = "grey", asp = 1)
# plotting arcs
wrow = which(ahR$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahR$arcs[i,1:2], ahR$arcs[i,3], ahR$arcs[i,4:5], ahR$arcs[i,6], col = "red", lty = 2)
}
wrow = which(ahcpp$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahcpp$arcs[i,1:2], ahcpp$arcs[i,3], ahcpp$arcs[i,4:5], ahcpp$arcs[i,6], col = "cyan", lty = 2)
}
library(RcppAlphahull)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
library(RcppAlphahull)
library(RcppAlphahull)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
# plotting arcs
wrow = which(ahR$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahR$arcs[i,1:2], ahR$arcs[i,3], ahR$arcs[i,4:5], ahR$arcs[i,6], col = "red", lty = 2)
}
wrow = which(ahcpp$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahcpp$arcs[i,1:2], ahcpp$arcs[i,3], ahcpp$arcs[i,4:5], ahcpp$arcs[i,6], col = "cyan", lty = 2)
}
plot(vorR, number = T, wpoints = F, wlines = "vor", col = "grey", asp = 1)
# plotting arcs
wrow = which(ahR$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahR$arcs[i,1:2], ahR$arcs[i,3], ahR$arcs[i,4:5], ahR$arcs[i,6], col = "red", lty = 2)
}
wrow = which(ahcpp$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahcpp$arcs[i,1:2], ahcpp$arcs[i,3], ahcpp$arcs[i,4:5], ahcpp$arcs[i,6], col = "cyan", lty = 2)
}
sourceCpp("tmp.cpp")
setwd("~/Documenti/ProgettoPACS/RcppAlphahull/src")
sourceCpp("tmp.cpp")
library(Rcpp)
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
library(RcppAlphahull)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(vorR, number = T, wpoints = F, wlines = "vor", col = "grey", asp = 1)
# plotting arcs
wrow = which(ahR$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahR$arcs[i,1:2], ahR$arcs[i,3], ahR$arcs[i,4:5], ahR$arcs[i,6], col = "red", lty = 2)
}
wrow = which(ahcpp$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahcpp$arcs[i,1:2], ahcpp$arcs[i,3], ahcpp$arcs[i,4:5], ahcpp$arcs[i,6], col = "cyan", lty = 2)
}
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
library(RcppAlphahull)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(vorR, number = T, wpoints = F, wlines = "vor", col = "grey", asp = 1)
# plotting arcs
wrow = which(ahR$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahR$arcs[i,1:2], ahR$arcs[i,3], ahR$arcs[i,4:5], ahR$arcs[i,6], col = "red", lty = 2)
}
wrow = which(ahcpp$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahcpp$arcs[i,1:2], ahcpp$arcs[i,3], ahcpp$arcs[i,4:5], ahcpp$arcs[i,6], col = "cyan", lty = 2)
}
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
// building arcs matrix
Rcpp::NumericMatrix arcs_mat(arcs.size(), 8);
for(size_t i=0; i<arcs.size(); i++){
// I need to rotate the arc vector to match the alphahull description of arcs
Vector2<T> v = arcs[i].getMidVector();
arcs_mat(i,0) = arcs[i].getBall().center().x;
arcs_mat(i,1) = arcs[i].getBall().center().y;
arcs_mat(i,2) = arcs[i].getBall().radius();
arcs_mat(i,3) = v.x;
arcs_mat(i,4) = v.y;
arcs_mat(i,5) = arcs[i].width()/2;
}
colnames(arcs_mat) = Rcpp::CharacterVector::create("c1", "c2", "r", "vx", "vy", "theta", "end1", "end2");
# plotting arcs
wrow = which(ahR$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahR$arcs[i,1:2], ahR$arcs[i,3], ahR$arcs[i,4:5], ahR$arcs[i,6], col = "red", lty = 2)
}
wrow = which(ahcpp$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahcpp$arcs[i,1:2], ahcpp$arcs[i,3], ahcpp$arcs[i,4:5], ahcpp$arcs[i,6], col = "cyan", lty = 2)
}
ahcpp$arcs
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
sourceCpp("tmp.cpp")
library(RcppAlphahull)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(vorR, number = T, wpoints = F, wlines = "vor", col = "grey", asp = 1)
# plotting arcs
wrow = which(ahR$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahR$arcs[i,1:2], ahR$arcs[i,3], ahR$arcs[i,4:5], ahR$arcs[i,6], col = "red", lty = 2)
}
wrow = which(ahcpp$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahcpp$arcs[i,1:2], ahcpp$arcs[i,3], ahcpp$arcs[i,4:5], ahcpp$arcs[i,6], col = "cyan", lty = 2)
}
alpha = 1
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(vorR, number = T, wpoints = F, wlines = "vor", col = "grey", asp = 1)
# plotting arcs
wrow = which(ahR$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahR$arcs[i,1:2], ahR$arcs[i,3], ahR$arcs[i,4:5], ahR$arcs[i,6], col = "red", lty = 2)
}
wrow = which(ahcpp$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahcpp$arcs[i,1:2], ahcpp$arcs[i,3], ahcpp$arcs[i,4:5], ahcpp$arcs[i,6], col = "cyan", lty = 2)
}
ahcpp$length
ahR$length
n = 35
set.seed(353)
x = runif(n)
y = runif(n)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'both', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
alpha = 1
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
# plotting arcs
wrow = which(ahR$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahR$arcs[i,1:2], ahR$arcs[i,3], ahR$arcs[i,4:5], ahR$arcs[i,6], col = "red", lty = 2)
}
wrow = which(ahcpp$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahcpp$arcs[i,1:2], ahcpp$arcs[i,3], ahcpp$arcs[i,4:5], ahcpp$arcs[i,6], col = "cyan", lty = 2)
}
system.time(alphahull::ahull(vorR, alpha = alpha))
system.time(RcppAlphahull::ahull(vorcpp, alpha = alpha))
n = 1000
set.seed(353)
x = runif(n)
y = runif(n)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
system.time(alphahull::ahull(vorR, alpha = alpha))
system.time(RcppAlphahull::ahull(vorcpp, alpha = alpha))
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'both', number = F, asp = 1))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F, asp = 1))
# plotting arcs
wrow = which(ahR$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahR$arcs[i,1:2], ahR$arcs[i,3], ahR$arcs[i,4:5], ahR$arcs[i,6], col = "red", lty = 2)
}
wrow = which(ahcpp$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahcpp$arcs[i,1:2], ahcpp$arcs[i,3], ahcpp$arcs[i,4:5], ahcpp$arcs[i,6], col = "cyan", lty = 2)
}
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
# plotting arcs
wrow = which(ahR$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahR$arcs[i,1:2], ahR$arcs[i,3], ahR$arcs[i,4:5], ahR$arcs[i,6], col = "red", lty = 2)
}
wrow = which(ahcpp$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahcpp$arcs[i,1:2], ahcpp$arcs[i,3], ahcpp$arcs[i,4:5], ahcpp$arcs[i,6], col = "cyan", lty = 2)
}
alpha = 1
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(vorR, number = T, wpoints = F, wlines = "vor", col = "grey", asp = 1)
# plotting arcs
wrow = which(ahR$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahR$arcs[i,1:2], ahR$arcs[i,3], ahR$arcs[i,4:5], ahR$arcs[i,6], col = "red", lty = 2)
}
wrow = which(ahcpp$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahcpp$arcs[i,1:2], ahcpp$arcs[i,3], ahcpp$arcs[i,4:5], ahcpp$arcs[i,6], col = "cyan", lty = 2)
}
ahcpp$length
ahR$arcs
ahcpp$length
ahR$length
n = 36 # 35
set.seed(353)
x = runif(n)
y = runif(n)
n = 35 # 35
set.seed(35343) # 353
x = runif(n)
y = runif(n)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
alpha = 0.1
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
asR$alpha.extremes
ascpp$alpha.extremes
plot(asR, wpoints = T)
plot(ascpp, wpoints = T, col = c("red","black"))
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
ahcpp$length
ahR$length
plot(ahR, col = c("blue", "black"))
help(plot.ahull)
plot(ahR, col = c("blue", "black", "black"))
plot(ahR, col = c("blue", "black", "black", "black", "black", "black", "black", "black"))
plot(ahR, col = c("blue", "black", "black", "black", "black", "black"), asp = 1)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), add = T)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"))
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1)
alpha = 1
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1)
ahcpp$length
ahR$length
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
View(ahcpp$arcs)
View(ahR$arcs)
n = 35 # 35
set.seed(35343) # 353
x = runif(n)
y = runif(n)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
alpha = 0.1
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
asR$alpha.extremes
ascpp$alpha.extremes
plot(asR, wpoints = T)
plot(ascpp, wpoints = T, col = c("red","black"))
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
ahcpp$length
ahR$length
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
plot(vorR, number = T, wpoints = F, wlines = "vor", col = "grey", asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
set.seed(12345) # 353
theta = runif(50, 0, 2*pi)
x = cos(theta)
y = sin(theta)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'both', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'both', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
n = 35 # 35
set.seed(12345) # 353
theta = runif(50, 0, 2*pi)
r = runif(50, 0.2, 0.5)
x = r*cos(theta)+0.5
y = r*sin(theta)+0.5
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'both', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
theta = runif(300, 0, 2*pi)
r = runif(300, 0.2, 0.5)
x = r*cos(theta)+0.5
y = r*sin(theta)+0.5
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'both', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
alpha = 0.1
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
plot(asR, wpoints = T)
plot(ascpp, wpoints = T, col = c("red","black"))
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
alpha = 1
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
alpha = 0.2
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
plot(vorR, number = T, wpoints = F, wlines = "vor", col = "grey", asp = 1)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
alpha = 0.2
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
alpha = 0.1
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
alpha = 0.01
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1)
dist(cbind(x,y))
min(dist(cbind(x,y)))
min(dist(cbind(x,y)))/2
alpha = 0.0007
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1)
alpha = 0.0000007
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1)
alpha = 0.2
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1)
library(RcppAlphahull)
library(RcppAlphahull)
library(RcppAlphahull)
n = 35 # 35
set.seed(12345) # 353
x = runif(n)
y = runif(n)
theta = runif(300, 0, 2*pi)
r = runif(300, 0.2, 0.5)
x = r*cos(theta)+0.5
y = r*sin(theta)+0.5
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
alpha = 0.1
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
asR$alpha.extremes
ascpp$alpha.extremes
plot(asR, wpoints = T)
plot(ascpp, wpoints = T, col = c("red","black"))
ahR$length
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1)
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'both', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
library(RcppAlphahull)
library(RcppAlphahull)
help("RcppAlphahull")
help(delvor)
View(delvor$tri.obj)
View(vorcpp$tri.obj)
View(vorcpp$tri.obj)
library(RcppAlphahull)
help(delvor)
library(RcppAlphahull)
help(ahull)
help("RcppAlphahull")
help(alphahull)
library(alphahull)
help(alphahull)
library(RcppAlphahull)
document()
library(devtools)
document()
help("RcppAlphahull")
document()
help("RcppAlphahull")
help("RcppAlphahull")
document()
help("RcppAlphahull")
document()
help("RcppAlphahull")
document()
document()
help("RcppAlphahull")
document()
help("RcppAlphahull")
devtools::build_manual()
document()
document()
document()
help("RcppAlphahull")
document()
help("RcppAlphahull")
devtools::build_manual()
devtools::build_vignettes()
devtools::build_vignettes()
library(RcppAlphahull)
library(RcppAlphahull)
help("RcppAlphahull")
devtools::build_manual()
document()
library(roxygen2)
roxygenize()
roxygenize()
document()
document()
roxygenize()
library(RcppAlphahull)
library(RcppAlphahull)
help("RcppAlphahull")
devtools::build_manual()
help(ahull)
library(RcppAlphahull)
library(RcppAlphahull)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
library(RcppAlphahull)
