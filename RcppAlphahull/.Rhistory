help("RcppAlphahull")
library(RcppAlphahull)
help("RcppAlphahull")
build_manual()
library(RcppAlphahull)
library(RcppAlphahull)
help(package = "RcppAlphahull")
roxygen2::roxygenize()
roxygen2::roxygenise()
library(RcppAlphahull)
devtools::create_description()
devtools::check()
help(package = "RcppAlphahull")
build_manual()
help(package = "RcppAlphahull")
help(RcppAlphahull)
library(RcppAlphahull)
vorcpp = RcppAlphahull::delvor(x,y)
n = 35 # 35
set.seed(12345) # 353
x = runif(n)
y = runif(n)
vorcpp = RcppAlphahull::delvor(x,y)
library(RcppAlphahull)
vorcpp = RcppAlphahull::delvor(x,y)
library(RcppAlphahull)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'both', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'both', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
install.packages("RcppGLS")
install.packages("RcppGLS")
install.packages("RcppGSL")
install.packages("RcppGSL")
install.packages("RcppGSL")
install.packages("RcppGSL")
install.packages("RcppGSL")
install.packages("GSL")
install.packages("GSL")
install.packages("RcppGSL")
library(RcppAlphahull)
vorcpp = RcppAlphahull::delvor(x,y)
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'both', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
system.time(RcppAlphahull::delvor(x,y))
system.time(alphahull::delvor(x,y))
system.time(RcppAlphahull::delvor(x,y))
system.time(alphahull::delvor(x,y))
n = 3500 # 35
set.seed(12345) # 353
x = runif(n)
y = runif(n)
system.time(RcppAlphahull::delvor(x,y))
system.time(alphahull::delvor(x,y))
n = 10000 # 35
set.seed(12345) # 353
x = runif(n)
y = runif(n)
system.time(RcppAlphahull::delvor(x,y))
system.time(alphahull::delvor(x,y))
library(RcppAlphahull)
system.time(RcppAlphahull::delvor(x,y))
system.time(alphahull::delvor(x,y))
library(RcppAlphahull)
system.time(RcppAlphahull::delvor(x,y))
system.time(RcppAlphahull::delvor(x,y))
system.time(RcppAlphahull::delvor(x,y))
require(rbenchmark)
res = benchmark("Cpp" = RcppAlphahull::delvor(x, y), "R" = alphahull::delvor(x, y), replications = 1)
res
tmp
CppTime = rbind(CppTime, res[which(res[,"test"] == "Cpp"), c("elapsed", "user.self", "sys.self")])
RTime = rbind(RTime, res[which(res[,"test"] == "R"), c("elapsed", "user.self", "sys.self")])
relative = c()
RTime = c()
CppTime = c()
CppTime = rbind(CppTime, res[which(res[,"test"] == "Cpp"), c("elapsed", "user.self", "sys.self")])
RTime = rbind(RTime, res[which(res[,"test"] == "R"), c("elapsed", "user.self", "sys.self")])
relative = c(relative, res[which(res[,"test"] == "R"), c("relative")])
tmp = cbind(CppTime, RTime)
tmp
system.time(RcppAlphahull::delvor(x,y))
system.time(alphahull::delvor(x,y))
library(RcppAlphahull)
system.time(RcppAlphahull::delvor(x,y))
system.time(alphahull::delvor(x,y))
n = 35 # 35
set.seed(12345) # 353
x = runif(n)
y = runif(n)
system.time(RcppAlphahull::delvor(x,y))
system.time(alphahull::delvor(x,y))
system.time(RcppAlphahull::delvor(x,y))
system.time(alphahull::delvor(x,y))
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'both', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'both', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
# Federico Airoldi    matricola: 892377   codice persona: 10484065
#
# this script tests that my connection matrix retrieved from the MyGAL library has the
# same structure of the one returned by the "delvor" function of the package alphahull
#
# parameters that can be modified:
# - n:                 number of sites
# - n.test:            number of tests to be excecuted
# - set.seed(rule(i)): seed for the i-th test, one can assign any rule for the seed used to sample the
#                      points. rule(i) is a function that returns a number (even a floating point one)
#
# NB: this script is quite slow due to R inefficient allocation/problems with for cicles
require(alphahull)
require(RcppAlphahull)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("search.R")
print("executing test")
# contains those test cases in which infinite edge of delvor result are not contained
# in the MyGAL result
infedges = c()
# contains those test cases in which the number of the infinite edges of the two
# results are different
ninfedges = c()
# contains those test cases in which finite edge of delvor result are not contained
# in the MyGAL result
finedges = c()
# contains those test cases in which the number of the finite edges of the two
# results are different
nfinedges = c()
n = 50 # number of point to sample for the voronoi diagram tests (feel free to change)
n.test = 200
for(i in 1:n.test){
if(i%%50==0) print(i) # print the number of the test on the command line (can be commented to save some time)
set.seed(i)  # setting the seed for the test (feel free to modify and set your own seed)
x = runif(n) # sampling points
y = runif(n)
# calling the RcppAlphahull and alphahull function to compute Voronoi diagram
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x,y)
# checking infinite edges
# same number of infinite edges? if not adding the test to the queue ninfedges
if(length(which(vorcpp$mesh[, "bp2"] == 1 | vorcpp$mesh[, "bp1"] == 1))
!= length(which(vorR$mesh[, "bp2"] == 1 | vorR$mesh[, "bp1"] == 1)))
ninfedges = c(ninfedges, i)
# same infinite edges? if not adding the test to the queue infedges
k = 0
tmp = vorR$mesh[which(vorR$mesh[,"bp2"] == 1 | vorR$mesh[, "bp1"] == 1), 1:2]
tmp2 = vorcpp$mesh[which(vorcpp$mesh[,"bp2"] == 1 | vorcpp$mesh[, "bp1"] == 1), 1:2]
for(i in 1:dim(tmp)[1])
k = k + !(search(tmp[i,"ind1"], tmp[i,"ind2"], tmp2))
if(k > 0)
infedges = c(infedges, i)
# checking finite edges
# same number of finite edges? if not adding the test to the queue nfinedges
if(length(which(vorcpp$mesh[, "bp2"] == 0 & vorcpp$mesh[, "bp1"] == 0))
!= length(which(vorR$mesh[, "bp2"] == 0 & vorR$mesh[, "bp1"] == 0)))
nfinedges = c(nfinedges, i)
# same finite edges? if not adding the test to the queue finedges
k = 0
tmp = vorR$mesh[which(vorR$mesh[,"bp2"] == 0 & vorR$mesh[, "bp1"] == 0), 1:2]
tmp2 = vorcpp$mesh[which(vorcpp$mesh[,"bp2"] == 0 & vorcpp$mesh[, "bp1"] == 0), 1:2]
for(i in 1:dim(tmp)[1])
k = k + !(search(tmp[i,"ind1"], tmp[i,"ind2"], tmp2))
if(k > 0)
finedges = c(finedges, i)
}
rm(list = c("k", "tmp", "tmp2", "i", "vorcpp", "vorR", "x", "y"))
infedges
ninfedges
finedges
nfinedges
library(RcppAlphahull)
n = 35 # 35
set.seed(12345) # 353
x = runif(n)
y = runif(n)
theta = runif(300, 0, 2*pi)
r = runif(300, 0.2, 0.5)
x = r*cos(theta)+0.5
y = r*sin(theta)+0.5
system.time(RcppAlphahull::delvor(x,y))
system.time(alphahull::delvor(x,y))
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'both', number = F))
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'both', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
vorcpp$mesh
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
# Federico Airoldi    matricola: 892377   codice persona: 10484065
#
# this script tests the performances of the package alphahull with respect to the
# performances of the R/C++ hybrid package RcppAlphahull
#
# by setting a different number of sites the scripr compute the Voronoi diagram and
# Delanuay tesselation of n randomized point of R2 in [0;1]x[0;1] (if one likes, he
# can change the seed)
require(rbenchmark)
require(alphahull)
require(RcppAlphahull)
set.seed(7658)
n.nodes = c( seq(100,900,by=100),
seq(1000,9000,by=1000),
seq(10000,60000,by=10000))
relative = c()
RTime = c()
CppTime = c()
for(n in n.nodes){
print(paste("Simulation:",n))
x = runif(n)
y = runif(n)
res = benchmark("Cpp" = RcppAlphahull::delvor(x, y), "R" = alphahull::delvor(x, y), replications = 1)
CppTime = rbind(CppTime, res[which(res[,"test"] == "Cpp"), c("elapsed", "user.self", "sys.self")])
RTime = rbind(RTime, res[which(res[,"test"] == "R"), c("elapsed", "user.self", "sys.self")])
relative = c(relative, res[which(res[,"test"] == "R"), c("relative")])
}
tmp = cbind(CppTime, RTime)
Cpp.User = tmp[,2]
R.User = tmp[,5]
transfCpp = n.nodes*log(n.nodes, 2)
transfR = (n.nodes*log(n.nodes, 2))^2
fit.cpp = lm(Cpp.User ~ 0 + transfCpp)
summary(fit.cpp)
fit.R = lm(R.User ~ 0 + transfR)
summary(fit.R)
N = 15
x11()
#tiff("speed.tiff")
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"), )
#graphics.off()
R.User/Cpp.User
# Federico Airoldi    matricola: 892377   codice persona: 10484065
#
# this script tests that my connection matrix retrieved from the MyGAL library has the
# same structure of the one returned by the "delvor" function of the package alphahull
#
# parameters that can be modified:
# - n:                 number of sites
# - n.test:            number of tests to be excecuted
# - set.seed(rule(i)): seed for the i-th test, one can assign any rule for the seed used to sample the
#                      points. rule(i) is a function that returns a number (even a floating point one)
#
# NB: this script is quite slow due to R inefficient allocation/problems with for cicles
require(alphahull)
require(RcppAlphahull)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("search.R")
print("executing test")
# contains those test cases in which infinite edge of delvor result are not contained
# in the MyGAL result
infedges = c()
# contains those test cases in which the number of the infinite edges of the two
# results are different
ninfedges = c()
# contains those test cases in which finite edge of delvor result are not contained
# in the MyGAL result
finedges = c()
# contains those test cases in which the number of the finite edges of the two
# results are different
nfinedges = c()
n = 50 # number of point to sample for the voronoi diagram tests (feel free to change)
n.test = 200
for(i in 1:n.test){
if(i%%50==0) print(i) # print the number of the test on the command line (can be commented to save some time)
set.seed(i)  # setting the seed for the test (feel free to modify and set your own seed)
x = runif(n) # sampling points
y = runif(n)
# calling the RcppAlphahull and alphahull function to compute Voronoi diagram
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x,y)
# checking infinite edges
# same number of infinite edges? if not adding the test to the queue ninfedges
if(length(which(vorcpp$mesh[, "bp2"] == 1 | vorcpp$mesh[, "bp1"] == 1))
!= length(which(vorR$mesh[, "bp2"] == 1 | vorR$mesh[, "bp1"] == 1)))
ninfedges = c(ninfedges, i)
# same infinite edges? if not adding the test to the queue infedges
k = 0
tmp = vorR$mesh[which(vorR$mesh[,"bp2"] == 1 | vorR$mesh[, "bp1"] == 1), 1:2]
tmp2 = vorcpp$mesh[which(vorcpp$mesh[,"bp2"] == 1 | vorcpp$mesh[, "bp1"] == 1), 1:2]
for(i in 1:dim(tmp)[1])
k = k + !(search(tmp[i,"ind1"], tmp[i,"ind2"], tmp2))
if(k > 0)
infedges = c(infedges, i)
# checking finite edges
# same number of finite edges? if not adding the test to the queue nfinedges
if(length(which(vorcpp$mesh[, "bp2"] == 0 & vorcpp$mesh[, "bp1"] == 0))
!= length(which(vorR$mesh[, "bp2"] == 0 & vorR$mesh[, "bp1"] == 0)))
nfinedges = c(nfinedges, i)
# same finite edges? if not adding the test to the queue finedges
k = 0
tmp = vorR$mesh[which(vorR$mesh[,"bp2"] == 0 & vorR$mesh[, "bp1"] == 0), 1:2]
tmp2 = vorcpp$mesh[which(vorcpp$mesh[,"bp2"] == 0 & vorcpp$mesh[, "bp1"] == 0), 1:2]
for(i in 1:dim(tmp)[1])
k = k + !(search(tmp[i,"ind1"], tmp[i,"ind2"], tmp2))
if(k > 0)
finedges = c(finedges, i)
}
rm(list = c("k", "tmp", "tmp2", "i", "vorcpp", "vorR", "x", "y"))
infedges
ninfedges
finedges
nfinedges
n = 35 # 35
set.seed(12345) # 353
x = runif(n)
y = runif(n)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
vorcpp$mesh
library(RcppAlphahull)
system.time(RcppAlphahull::delvor(x,y))
system.time(alphahull::delvor(x,y))
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
n = 35 # 35
set.seed(12345) # 353
x = runif(n)
y = runif(n)
theta = runif(300, 0, 2*pi)
r = runif(300, 0.2, 0.5)
x = r*cos(theta)+0.5
y = r*sin(theta)+0.5
system.time(RcppAlphahull::delvor(x,y))
system.time(alphahull::delvor(x,y))
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
ahR = alphahull::ahull(vorR, alpha = alpha)
alpha = 0.2
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1)
plot(vorR, number = T, wpoints = F, wlines = "vor", col = "grey", asp = 1)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1)
alpha = 0.1
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
plot(asR, wpoints = T)
plot(ascpp, wpoints = T, col = c("red","black"))
# Federico Airoldi    matricola: 892377   codice persona: 10484065
#
# this script tests that my alpha-shape object retrieved starting from a delvor object has the same
# structure of the one returned by the "ashape" function of the package alphahull
#
# parameters that can be modified:
# - n:                 number of sites
# - n.test:            number of tests to be excecuted
# - alpha:             parameter for alpha shape computation (may be fixed for each test)
# - set.seed(rule(i)): seed for the i-th test, one can assign any rule for the seed used to sample the
#                      points. rule(i) is a function that returns a number (even a floating point one)
#
# NB: this script is quite slow due to R inefficient allocation/problems with for cicles
require(alphahull)
require(RcppAlphahull)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("search.R")
print("executing test")
# contains those test cases in which the ashape matrix don't coincide
not.matching = c()
not.matching.size = c()
not.matching.length = c()
perc.length.diff = c()
eps = 1e-15 # tollerance for confrontation of alpha shape lengths
# up to 1e-15 lengths are the "same"
n.test = 300
used.n = c() # keeps track of the number of points sampled for the different tests
for(i in 1:n.test){
if(i%%50==0) print(i) # print the number of the test on the command line (can be commented to save some time)
set.seed(i)  # setting the seed for the test (feel free to modify and set your own seed)
n = sample(50:300, 1)
x = runif(n,0,10) # sampling points
y = runif(n,0,10)
alpha = runif(1); # sampling alpha
# calling the RcppAlphahull and alphahull function to compute the alpha shape
ascpp = RcppAlphahull::ashape(x,y,alpha)
asR = alphahull::ashape(x,y,alpha)
# check lengths
# do the alpha shapes have the same length? if not adding the test to the queue not.matching.length
if( dim(asR$edges)[1]!=0 )
perc.length.diff = c(perc.length.diff, abs( (asR$length - ascpp$length)/ascpp$length ))
else
perc.length.diff = c(perc.length.diff, 0)
# checking edges
# same number of edges? if not adding the test to the queue not.matching.size
if(dim(asR$edges)[1]!=dim(ascpp$edges)[1])
not.matching.size = c(not.matching.size, i)
# same edges for the alpha? if not adding the test to the queue of wrong tests
k = 0
if(dim(asR$edges)[1]!=0)
for(i in 1:dim(asR$edges)[1])
k = k + !(search(asR$edges[i,"ind1"], asR$edges[i,"ind2"], ascpp$edges))
if(k > 0)
not.matching = c(not.matching, i)
used.n = c(used.n, n)
}
not.matching.length = which(perc.length.diff >= eps)
rm(list = c("k", "i", "ascpp", "asR", "x", "y"))
not.matching.size
not.matching.length
not.matching
library(RcppAlphahull)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
n = 35 # 35
set.seed(12345) # 353
x = runif(n)
y = runif(n)
system.time(RcppAlphahull::delvor(x,y))
system.time(alphahull::delvor(x,y))
system.time(RcppAlphahull::delvor(x,y))
system.time(alphahull::delvor(x,y))
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
library(RcppAlphahull)
library(RcppAlphahull)
n = 35 # 35
set.seed(12345) # 353
x = runif(n)
y = runif(n)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
View(vorcpp)
alpha = 0.1
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
View(ascpp)
library(RcppAlphahull)
library(RcppAlphahull)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
alpha = 0.1
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
asR$alpha.extremes
ascpp$alpha.extremes
plot(asR, wpoints = T)
plot(ascpp, wpoints = T, col = c("red","black"))
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
ahcpp$length
ahR$length
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1)
View(ascpp)
alphahull::inahull(ahR, c(x, y))
RcppAlphahull::inahull(ahcpp, x, y)
library(RcppAlphahull)
system.time(RcppAlphahull::delvor(x,y))
system.time(alphahull::delvor(x,y))
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
alpha = 0.1
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
asR$alpha.extremes
ascpp$alpha.extremes
plot(asR, wpoints = T)
plot(ascpp, wpoints = T, col = c("red","black"))
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1)
library(RcppAlphahull)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
alpha = 0.1
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
plot(asR, wpoints = T)
plot(ascpp, wpoints = T, col = c("red","black"))
asR$alpha.extremes
ascpp$alpha.extremes
library(RcppAlphahull)
n = 35 # 35
set.seed(12345) # 353
x = runif(n)
y = runif(n)
theta = runif(300, 0, 2*pi)
r = runif(300, 0.2, 0.5)
x = r*cos(theta)+0.5
vorcpp = RcppAlphahull::delvor(x,y)
n = 35 # 35
set.seed(12345) # 353
x = runif(n)
y = runif(n)
x = r*cos(theta)+0.5
system.time(RcppAlphahull::delvor(x,y))
system.time(alphahull::delvor(x,y))
library(RcppAlphahull)
library(RcppAlphahull)
