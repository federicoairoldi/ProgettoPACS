alpha.shape = RcppAlphahull::ashape(xy, alpha = 0.85)
plot(alpha.shape, col = "blue")
plot(alpha.shape, col = c("blue","black"))
levels = length(unique(data_proxy[,"label"]))
x11()
par(mfrow = c(2,5))
for(level in 1:levels){
xy = data_proxy[which(data_proxy[,"label"]==level), 1:2]
xy = princomp(data_proxy[which(data_proxy[,"label"]==level), 1:3], scores = T)$scores[,1:2]
alpha.shape = RcppAlphahull::ashape(xy, alpha = 0.85)
plot(alpha.shape, col = c("blue","black"))
lista = list(lista, alpha.shape)
}
for(level in 1:levels){
xy = princomp(data_proxy[which(data_proxy[,"label"]==level), 1:3], scores = T)$scores[,1:2]
alpha.shape = RcppAlphahull::ashape(xy, alpha = 0.85)
# plot(alpha.shape, col = c("blue","black"))
lista = list(lista, alpha.shape)
}
for(level in 1:levels){
xy = princomp(data_proxy[which(data_proxy[,"label"]==level), 1:3], scores = T)$scores[,1:2]
alpha.shape = RcppAlphahull::ashape(xy, alpha = 0.85)
# plot(alpha.shape, col = c("blue","black"))
lista = list(lista, alpha.shape)
}
for(level in 1:levels){
xy = princomp(data_proxy[which(data_proxy[,"label"]==level), 1:3], scores = T)$scores[,1:2]
alpha.shape = RcppAlphahull::ashape(xy, alpha = 0.5)
# plot(alpha.shape, col = c("blue","black"))
lista = list(lista, alpha.shape)
}
x = runif(10)
y = runif(10)
plot(ashape(x,y,0.3))
plot(ashape(x,y,0.2))
plot(ahull(x,y,0.2))
for(level in 1:levels){
xy = princomp(data_proxy[which(data_proxy[,"label"]==level), 1:3], scores = T)$scores[,1:2]
alpha.hull = RcppAlphahull::ahull(xy, alpha = 0.5)
# plot(alpha.shape, col = c("blue","black"))
lista = list(lista, alpha.hull)
}
par(mfrow = c(2,5))
for(level in 1:levels){
xy = princomp(data_proxy[which(data_proxy[,"label"]==level), 1:3], scores = T)$scores[,1:2]
alpha.hull = alphahull::ahull(xy, alpha = 0.5)
# plot(alpha.shape, col = c("blue","black"))
lista = list(lista, alpha.hull)
}
devtools::document()
devtools::build_manual()
devtools::build_manual()
library(RcppAlphahull)
library(RcppAlphahull)
Rcpp::sourceCpp('src/utilities.h')
library(RcppAlphahull)
library(RcppAlphahull)
library(rgl)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load("Data_proxy.RData")
lista = list()
levels = length(unique(data_proxy[,"label"]))
colors = c("blue", "yellow", "green", "orange", "spring green", "pink", "grey", "light green", "steel blue", "turquoise1")
r3dDefaults$windowRect = c(0,50,800,800)
plot3d(data_proxy[,1:3], col = colors[data_proxy[,"label"]], pch = 19)
level = 1
xy = princomp(data_proxy[which(data_proxy[,"label"]==level), 1:3], scores = T)$scores[,1:2]
alpha.shape = RcppAlphahull::ashape(xy, alpha = 0.85)
plot(alpha.shape, col = c("red", col = colors[level]), asp = 1, xlab = "", ylab = "", pch = 19, main = paste("Face",level), cex.main = 3)
alpha.hull = RcppAlphahull::ahull(xy, alpha = 0.85)
plot(alpha.hull, col = c("red", "white", col = colors[level]), asp = 1, xlab = "", ylab = "", pch = 19, main = paste("Face",level), cex.main = 3)
library(RcppAlphahull)
require(xtable)
library(rgl)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load("Data_proxy.RData")
alpha.shapes = list()
alpha.hulls = list()
levels = length(unique(data_proxy[,"label"]))
colors = c("blue", "yellow", "green", "orange", "spring green", "pink", "grey", "light green", "steel blue", "turquoise1")
opbox/Alpha-hulls/Documenti/img/egg/egg_ashape.png", width = 960, height = 480 )
# par(mfrow = c(2,5))
print("ALPHA SHAPES")
for(level in 1:levels){
xy = princomp(data_proxy[which(data_proxy[,"label"]==level), 1:3], scores = T)$scores[,1:2]
alpha.shape = RcppAlphahull::ashape(xy, alpha = 0.85)
# png(paste("/home/federico/Dropbox/Alpha-hulls/Documenti/img/egg/face",level,"_ashape.png",sep=""), width = 960, height = 480 )
# plot(alpha.shape, col = c("red", col = colors[level]), asp = 1, xlab = "", ylab = "", pch = 19, main = paste("Face",level), cex.main = 3)
# graphics.off()
alpha.shapes = c(alpha.shapes, alpha.shape)
print(paste("Face ",level,": length = ",alpha.shape$length,sep = ""))
}
# graphics.off()
# x11()
# png("/home/federico/Dropbox/Alpha-hulls/Documenti/img/egg/egg_ahull.png", width = 960, height = 480 )
# par(mfrow = c(2,5))
print("ALPHA HULLS")
for(level in 1:levels){
xy = princomp(data_proxy[which(data_proxy[,"label"]==level), 1:3], scores = T)$scores[,1:2]
alpha.hull = RcppAlphahull::ahull(xy, alpha = 0.85)
# png(paste("/home/federico/Dropbox/Alpha-hulls/Documenti/img/egg/face",level,"_ahull.png",sep=""), width = 960, height = 480 )
# plot(alpha.hull, col = c("red", "white", col = colors[level]), asp = 1, xlab = "", ylab = "", pch = 19, main = paste("Face",level), cex.main = 3)
# graphics.off()
alpha.hulls = c(alpha.hulls, alpha.hull)
print(paste("Face ",level,": length = ",alpha.hull$length,sep = ""))
}
# graphics.off()
View(alpha.hulls)
View(alpha.hulls[1])
alpha.shapes = list()
alpha.hulls = list()
print("ALPHA HULLS")
for(level in 1:levels){
xy = princomp(data_proxy[which(data_proxy[,"label"]==level), 1:3], scores = T)$scores[,1:2]
alpha.hull = RcppAlphahull::ahull(xy, alpha = 0.85)
# png(paste("/home/federico/Dropbox/Alpha-hulls/Documenti/img/egg/face",level,"_ahull.png",sep=""), width = 960, height = 480 )
# plot(alpha.hull, col = c("red", "white", col = colors[level]), asp = 1, xlab = "", ylab = "", pch = 19, main = paste("Face",level), cex.main = 3)
# graphics.off()
alpha.hulls[level] = alpha.hull
print(paste("Face ",level,": length = ",alpha.hull$length,sep = ""))
}
level
# par(mfrow = c(2,5))
print("ALPHA SHAPES")
for(level in 1:levels){
xy = princomp(data_proxy[which(data_proxy[,"label"]==level), 1:3], scores = T)$scores[,1:2]
alpha.shape = RcppAlphahull::ashape(xy, alpha = 0.85)
# png(paste("/home/federico/Dropbox/Alpha-hulls/Documenti/img/egg/face",level,"_ashape.png",sep=""), width = 960, height = 480 )
# plot(alpha.shape, col = c("red", col = colors[level]), asp = 1, xlab = "", ylab = "", pch = 19, main = paste("Face",level), cex.main = 3)
# graphics.off()
alpha.shapes = append(alpha.shapes, alpha.shape)
print(paste("Face ",level,": length = ",alpha.shape$length,sep = ""))
}
alpha.shapes = list()
alpha.hulls = list()
lista = list()
lista
lista[[1]]
lista[[1]] = 0
lista[[1]]
lista[[2]]
lista[[2]] = alpha.hull
lista[[2]]
lista[[2]]$length
print("ALPHA SHAPES")
for(level in 1:levels){
xy = princomp(data_proxy[which(data_proxy[,"label"]==level), 1:3], scores = T)$scores[,1:2]
alpha.shape = RcppAlphahull::ashape(xy, alpha = 0.85)
# png(paste("/home/federico/Dropbox/Alpha-hulls/Documenti/img/egg/face",level,"_ashape.png",sep=""), width = 960, height = 480 )
# plot(alpha.shape, col = c("red", col = colors[level]), asp = 1, xlab = "", ylab = "", pch = 19, main = paste("Face",level), cex.main = 3)
# graphics.off()
alpha.shapes[[level]] = alpha.shape
print(paste("Face ",level,": length = ",alpha.shape$length,sep = ""))
}
alpha.shapes
View(alpha.shapes)
# par(mfrow = c(2,5))
print("ALPHA HULLS")
for(level in 1:levels){
xy = princomp(data_proxy[which(data_proxy[,"label"]==level), 1:3], scores = T)$scores[,1:2]
alpha.hull = RcppAlphahull::ahull(xy, alpha = 0.85)
# png(paste("/home/federico/Dropbox/Alpha-hulls/Documenti/img/egg/face",level,"_ahull.png",sep=""), width = 960, height = 480 )
# plot(alpha.hull, col = c("red", "white", col = colors[level]), asp = 1, xlab = "", ylab = "", pch = 19, main = paste("Face",level), cex.main = 3)
# graphics.off()
alpha.hulls[[level]] = alpha.hull
print(paste("Face ",level,": length = ",alpha.hull$length,sep = ""))
}
tab = c()
for(level in 1:levels){
tab = rbind(tab, c(alpha.shapes[[level]]$delvor.obj$tri.obj$n, alpha.shapes[[level]]$length, alpha.hulls[[level]]$length))
}
tab
text(0, 1.5, labels = expression("alpha"), cex = 2,  col = "red")
# arc example
c1 = c(0,0)
r = 2
v = c(sqrt(2)/2, sqrt(2)/2)
alpha = pi/2
plot(c1[1], c1[2], pch = 19, col = "black", xlab = "", ylab = "",  axes = F, xlim = c(-2,2.5),
ylim = c(-2,2), asp = 1, cex  = 1.3)
points(c(sqrt(2), -sqrt(2)), c(sqrt(2), sqrt(2)), col = "red", cex = 1.3, pch = 19)
alphahull::arc(c1, r, c(-1,0), pi, col = "black", lwd = 2.5)
alphahull::arc(c1, r, c(0,1), alpha/2, col = "red", lwd = 2.5)
alphahull::arc(c1, 1.4, c(0,1), alpha/2, col = "red", lty = 2)
alphahull::arc(c1, 0.5, c(cos(pi/8), sin(pi/8)), pi/8, col = "blue", lty = 2)
alphahull::arc(c1, 0.8, c(cos(3*pi/8), sin(3*pi/8)), 3*pi/8, col = "blue", lty = 2)
segments(0,0,4,0, col = "black", lty = 2)
segments(c1[1],c1[2],v[1]*r,v[2]*r, col = "red", lty = 2)
segments(c1[1],c1[2],-v[1]*r,v[2]*r, col = "red", lty = 2)
arrows(c1[1],c1[2],v[1],v[2],col = "red",code=2,length=0.1, lwd = 2.5)
text(0, 0, labels = "c", offset = 0.3, pos = 1, cex = 3)
text(0.1, 0.4, labels = "v", cex = 2, srt = 45, col = "red")
text(0, 1.5, labels = expression("alpha"), cex = 2,  col = "red")
text(0.6, 0.2, labels = expression(theta[1]), cex = 2,  col = "blue")
text(0, 1.5, labels = expression(alpha), cex = 2,  col = "red")
plot(c1[1], c1[2], pch = 19, col = "black", xlab = "", ylab = "",  axes = F, xlim = c(-2,2.5),
ylim = c(-2,2), asp = 1, cex  = 1.3)
points(c(sqrt(2), -sqrt(2)), c(sqrt(2), sqrt(2)), col = "red", cex = 1.3, pch = 19)
alphahull::arc(c1, r, c(-1,0), pi, col = "black", lwd = 2.5)
alphahull::arc(c1, r, c(0,1), alpha/2, col = "red", lwd = 2.5)
alphahull::arc(c1, 1.4, c(0,1), alpha/2, col = "red", lty = 2)
alphahull::arc(c1, 0.5, c(cos(pi/8), sin(pi/8)), pi/8, col = "blue", lty = 2)
alphahull::arc(c1, 0.8, c(cos(3*pi/8), sin(3*pi/8)), 3*pi/8, col = "blue", lty = 2)
segments(0,0,4,0, col = "black", lty = 2)
segments(c1[1],c1[2],v[1]*r,v[2]*r, col = "red", lty = 2)
segments(c1[1],c1[2],-v[1]*r,v[2]*r, col = "red", lty = 2)
arrows(c1[1],c1[2],v[1],v[2],col = "red",code=2,length=0.1, lwd = 2.5)
text(0, 0, labels = "c", offset = 0.3, pos = 1, cex = 3)
text(0.1, 0.4, labels = "v", cex = 2, srt = 45, col = "red")
text(0, 1.5, labels = expression(alpha), cex = 2,  col = "red")
text(0.6, 0.2, labels = expression(theta[1]), cex = 2,  col = "blue")
text(0, 1.6, labels = expression(alpha), cex = 2,  col = "red")
png("/home/federico/Dropbox/Alpha-hulls/Documenti/img/arc.png")
plot(c1[1], c1[2], pch = 19, col = "black", xlab = "", ylab = "",  axes = F, xlim = c(-2,2.5),
ylim = c(-2,2), asp = 1, cex  = 1.3)
points(c(sqrt(2), -sqrt(2)), c(sqrt(2), sqrt(2)), col = "red", cex = 1.3, pch = 19)
alphahull::arc(c1, r, c(-1,0), pi, col = "black", lwd = 2.5)
alphahull::arc(c1, r, c(0,1), alpha/2, col = "red", lwd = 2.5)
alphahull::arc(c1, 1.4, c(0,1), alpha/2, col = "red", lty = 2)
alphahull::arc(c1, 0.5, c(cos(pi/8), sin(pi/8)), pi/8, col = "blue", lty = 2)
alphahull::arc(c1, 0.8, c(cos(3*pi/8), sin(3*pi/8)), 3*pi/8, col = "blue", lty = 2)
segments(0,0,4,0, col = "black", lty = 2)
segments(c1[1],c1[2],v[1]*r,v[2]*r, col = "red", lty = 2)
segments(c1[1],c1[2],-v[1]*r,v[2]*r, col = "red", lty = 2)
arrows(c1[1],c1[2],v[1],v[2],col = "red",code=2,length=0.1, lwd = 2.5)
text(0, 0, labels = "c", offset = 0.3, pos = 1, cex = 3)
text(0.1, 0.4, labels = "v", cex = 2, srt = 45, col = "red")
text(0, 1.6, labels = expression(alpha), cex = 2,  col = "red")
text(0.6, 0.2, labels = expression(theta[1]), cex = 2,  col = "blue")
text(0, 0.9, labels = expression(theta[2]), cex = 2,  col = "blue")
graphics.off()
png("/home/federico/Dropbox/Alpha-hulls/Documenti/img/arc.png")
plot(c1[1], c1[2], pch = 19, col = "black", xlab = "", ylab = "",  axes = F, xlim = c(-2,2.5),
ylim = c(-2,2), asp = 1, cex  = 1.3)
points(c(sqrt(2), -sqrt(2)), c(sqrt(2), sqrt(2)), col = "red", cex = 1.3, pch = 19)
alphahull::arc(c1, r, c(-1,0), pi, col = "black", lwd = 2.5)
alphahull::arc(c1, r, c(0,1), alpha/2, col = "red", lwd = 2.5)
alphahull::arc(c1, 1.4, c(0,1), alpha/2, col = "red", lty = 2)
alphahull::arc(c1, 0.5, c(cos(pi/8), sin(pi/8)), pi/8, col = "blue", lty = 2)
alphahull::arc(c1, 0.8, c(cos(3*pi/8), sin(3*pi/8)), 3*pi/8, col = "blue", lty = 2)
segments(0,0,4,0, col = "black", lty = 2)
segments(c1[1],c1[2],v[1]*r,v[2]*r, col = "red", lty = 2)
segments(c1[1],c1[2],-v[1]*r,v[2]*r, col = "red", lty = 2)
arrows(c1[1],c1[2],v[1],v[2],col = "red",code=2,length=0.1, lwd = 2.5)
text(0, 0, labels = "c", offset = 0.3, pos = 1, cex = 3)
text(0.1, 0.4, labels = "v", cex = 2, srt = 45, col = "red")
text(0, 1.7, labels = expression(alpha), cex = 2,  col = "red")
text(0.6, 0.2, labels = expression(theta[1]), cex = 2,  col = "blue")
text(0, 0.9, labels = expression(theta[2]), cex = 2,  col = "blue")
graphics.off()
colnames(tab) = c("Number of points", expression(alpha,"-shape length"), expression(alpha,"-hull length"))
tab
colnames(tab) = c("Number of points", "alpha-shape length", "alpha-hull length")
tab
rownames = 1:10
rownames(tab) = 1:10
tab
xtable(tab, label = "tab:test", digits = c(0, rep(2,8)))
c(0, rep(2,8))
xtable(tab, label = "tab:test", digits = c(0, rep(5,2)))
c(0, rep(5,2))
xtable(tab, label = "tab:test", digits = c(0, 0, rep(5,2)))
xtable(tab, label = "tab:test", digits = c(0, 0, rep(5,2)), caption = "main quantities of the analysis of the eggshell.")
print("ALPHA SHAPES")
for(level in 1:levels){
xy = princomp(data_proxy[which(data_proxy[,"label"]==level), 1:3], scores = T)$scores[,1:2]
alpha.shape = RcppAlphahull::ashape(xy, alpha = 0.85)
png(paste("/home/federico/Dropbox/Alpha-hulls/Documenti/img/egg/face",level,"_ashape.png",sep=""), width = 960, height = 480 )
plot(alpha.shape, col = c("red", col = colors[level]), asp = 1, xlab = "", ylab = "", pch = 19, main = paste("Section",level), cex.main = 3)
graphics.off()
alpha.shapes[[level]] = alpha.shape
print(paste("Face ",level,": length = ",alpha.shape$length,sep = ""))
}
# graphics.off()
# x11()
# png("/home/federico/Dropbox/Alpha-hulls/Documenti/img/egg/egg_ahull.png", width = 960, height = 480 )
# par(mfrow = c(2,5))
print("ALPHA HULLS")
for(level in 1:levels){
xy = princomp(data_proxy[which(data_proxy[,"label"]==level), 1:3], scores = T)$scores[,1:2]
alpha.hull = RcppAlphahull::ahull(xy, alpha = 0.85)
png(paste("/home/federico/Dropbox/Alpha-hulls/Documenti/img/egg/face",level,"_ahull.png",sep=""), width = 960, height = 480 )
plot(alpha.hull, col = c("red", "white", col = colors[level]), asp = 1, xlab = "", ylab = "", pch = 19, main = paste("Section",level), cex.main = 3)
graphics.off()
alpha.hulls[[level]] = alpha.hull
print(paste("Face ",level,": length = ",alpha.hull$length,sep = ""))
}
library(RcppAlphahull)
require(rbenchmark)
require(alphahull)
require(RcppAlphahull)
if( getwd()!=dirname(rstudioapi::getActiveDocumentContext()$path) )
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
require(rbenchmark)
require(xtable)
require(alphahull)
require(RcppAlphahull)
set.seed(3)
n.nodes = c(10, 100, 1000, 10000)
times = c()
for(n in n.nodes){
print(paste("Simulation:",n))
x = runif(n)
y = runif(n)
alpha = runif(1)
vorcpp = RcppAlphahull::delvor(x, y)
vorR = alphahull::delvor(x, y)
res = benchmark("delvorCpp" = RcppAlphahull::delvor(x, y),
"delvorR" = alphahull::delvor(x, y),
"ashapeCpp" = RcppAlphahull::ashape(vorcpp, alpha = alpha),
"ashapeR" = alphahull::ashape(vorR, alpha = alpha),
"complementCpp" = RcppAlphahull::complement(vorcpp, alpha = alpha),
"complementR" = alphahull::complement(vorR, alpha = alpha),
"ahullCpp" = RcppAlphahull::ahull(vorcpp, alpha = alpha),
"ahullR" = alphahull::ahull(vorR, alpha = alpha),
replications = 1)
times = rbind(times, c(n, res[which(res[,"test"]=="delvorCpp"), "user.self"],
res[which(res[,"test"]=="ashapeCpp"), "user.self"],
res[which(res[,"test"]=="complementCpp"), "user.self"],
res[which(res[,"test"]=="ahullCpp"), "user.self"],
res[which(res[,"test"]=="delvorR"), "user.self"],
res[which(res[,"test"]=="ashapeR"), "user.self"],
res[which(res[,"test"]=="complementR"), "user.self"],
res[which(res[,"test"]=="ahullR"), "user.self"]))
}
colnames(times) = c("n", "delvor", "ashape", "complement", "ahull", "delvor", "ashape", "complement", "ahull")
times
set.seed(3)
n.nodes = c(10, 100, 1000, 10000)
times = c()
for(n in n.nodes){
print(paste("Simulation:",n))
x = runif(n)
y = runif(n)
alpha = runif(1)
vorcpp = RcppAlphahull::delvor(x, y)
vorR = alphahull::delvor(x, y)
res = benchmark("delvorCpp" = RcppAlphahull::delvor(x, y),
"delvorR" = alphahull::delvor(x, y),
"ashapeCpp" = RcppAlphahull::ashape(vorcpp, alpha = alpha),
"ashapeR" = alphahull::ashape(vorR, alpha = alpha),
"complementCpp" = RcppAlphahull::complement(vorcpp, alpha = alpha),
"complementR" = alphahull::complement(vorR, alpha = alpha),
"ahullCpp" = RcppAlphahull::ahull(vorcpp, alpha = alpha),
"ahullR" = alphahull::ahull(vorR, alpha = alpha),
replications = 1)
times = rbind(times, c(n, res[which(res[,"test"]=="delvorCpp"), "user.self"],
res[which(res[,"test"]=="ashapeCpp"), "user.self"],
res[which(res[,"test"]=="complementCpp"), "user.self"],
res[which(res[,"test"]=="ahullCpp"), "user.self"],
res[which(res[,"test"]=="delvorR"), "user.self"],
res[which(res[,"test"]=="ashapeR"), "user.self"],
res[which(res[,"test"]=="complementR"), "user.self"],
res[which(res[,"test"]=="ahullR"), "user.self"]))
}
colnames(times) = c("n", "delvor", "ashape", "complement", "ahull", "delvor", "ashape", "complement", "ahull")
times
n = 35 # 35
set.seed(353) # 353
x = runif(n)
y = runif(n)
theta = runif(300, 0, 2*pi)
r = runif(300, 0.2, 0.5)
x = r*cos(theta)+0.5
y = r*sin(theta)+0.5
system.time(RcppAlphahull::delvor(x,y))
system.time(alphahull::delvor(x,y))
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
alpha = 1
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
asR$alpha.extremes
ascpp$alpha.extremes
plot(asR, wpoints = T, wlines = 'both')
plot(ascpp, wpoints = T, col = c("red","black"))
alpha = 0.02
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
View(ahR$complement)
View(ahcpp$complement)
View(ahR$arcs)
View(ahcpp$arcs)
ahcpp$length
ahR$length
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1, add = T)
plot(vorR, number = F, wpoints = F, wlines = "vor", col = "grey", asp = 1)
alpha = 0.2
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
ahcpp
View(ahcpp$arcs)
ahcpp$length
ahR$length
library(RcppAlphahull)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
ahcpp$length
ahR$length
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1, add = T)
alpha = 0.1
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
ahcpp$length
ahR$length
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
alpha = 0.08
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
ahcpp$length
ahR$length
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
set.seed(3)
n.nodes = c(10, 100, 1000, 10000)
times = c()
for(n in n.nodes){
print(paste("Simulation:",n))
x = runif(n)
y = runif(n)
alpha = runif(1)
vorcpp = RcppAlphahull::delvor(x, y)
vorR = alphahull::delvor(x, y)
res = benchmark("delvorCpp" = RcppAlphahull::delvor(x, y),
"delvorR" = alphahull::delvor(x, y),
"ashapeCpp" = RcppAlphahull::ashape(vorcpp, alpha = alpha),
"ashapeR" = alphahull::ashape(vorR, alpha = alpha),
"complementCpp" = RcppAlphahull::complement(vorcpp, alpha = alpha),
"complementR" = alphahull::complement(vorR, alpha = alpha),
"ahullCpp" = RcppAlphahull::ahull(vorcpp, alpha = alpha),
"ahullR" = alphahull::ahull(vorR, alpha = alpha),
replications = 1)
times = rbind(times, c(n, res[which(res[,"test"]=="delvorCpp"), "user.self"],
res[which(res[,"test"]=="ashapeCpp"), "user.self"],
res[which(res[,"test"]=="complementCpp"), "user.self"],
res[which(res[,"test"]=="ahullCpp"), "user.self"],
res[which(res[,"test"]=="delvorR"), "user.self"],
res[which(res[,"test"]=="ashapeR"), "user.self"],
res[which(res[,"test"]=="complementR"), "user.self"],
res[which(res[,"test"]=="ahullR"), "user.self"]))
}
colnames(times) = c("n", "delvor", "ashape", "complement", "ahull", "delvor", "ashape", "complement", "ahull")
times
set.seed(3)
n.nodes = c(10, 100, 1000, 10000)
times = c()
for(n in n.nodes){
print(paste("Simulation:",n))
x = runif(n)
y = runif(n)
alpha = runif(1)
vorcpp = RcppAlphahull::delvor(x, y)
vorR = alphahull::delvor(x, y)
res = benchmark("delvorCpp" = RcppAlphahull::delvor(x, y),
"delvorR" = alphahull::delvor(x, y),
"ashapeCpp" = RcppAlphahull::ashape(vorcpp, alpha = alpha),
"ashapeR" = alphahull::ashape(vorR, alpha = alpha),
"complementCpp" = RcppAlphahull::complement(vorcpp, alpha = alpha),
"complementR" = alphahull::complement(vorR, alpha = alpha),
"ahullCpp" = RcppAlphahull::ahull(vorcpp, alpha = alpha),
"ahullR" = alphahull::ahull(vorR, alpha = alpha),
replications = 1)
times = rbind(times, c(n, res[which(res[,"test"]=="delvorCpp"), "user.self"],
res[which(res[,"test"]=="ashapeCpp"), "user.self"],
res[which(res[,"test"]=="complementCpp"), "user.self"],
res[which(res[,"test"]=="ahullCpp"), "user.self"],
res[which(res[,"test"]=="delvorR"), "user.self"],
res[which(res[,"test"]=="ashapeR"), "user.self"],
res[which(res[,"test"]=="complementR"), "user.self"],
res[which(res[,"test"]=="ahullR"), "user.self"]))
}
colnames(times) = c("n", "delvor", "ashape", "complement", "ahull", "delvor", "ashape", "complement", "ahull")
times
set.seed(3)
n.nodes = seq(100, 1000, by = 100)
RTime = c()
CppTime = c()
for(n in n.nodes){
print(paste("Simulation:",n))
x = runif(n)
y = runif(n)
alpha = runif(1)
vorcpp = RcppAlphahull::delvor(x, y)
vorR = alphahull::delvor(x, y)
res = benchmark("Cpp" = RcppAlphahull::ahull(vorcpp, alpha = alpha),
"R" = alphahull::ahull(vorR, alpha = alpha),
replications = 1)
CppTime = rbind(CppTime, res[which(res[,"test"] == "Cpp"), c("elapsed", "user.self", "sys.self")])
RTime = rbind(RTime, res[which(res[,"test"] == "R"), c("elapsed", "user.self", "sys.self")])
}
Cpp.User = CppTime[,2]
R.User = RTime[,2]
transf = n.nodes*log(n.nodes, 2)
fit.cpp = lm(Cpp.User ~ transf)
summary(fit.cpp)
fit.R = lm(R.User ~ transf)
summary(fit.R)
x11()
# png("/home/federico/Dropbox/Alpha-hulls/Report/img/speed_ahull.png")
par(mar = c(5,6,1,1))
plot(c(n.nodes, n.nodes), c(Cpp.User, R.User), xlab = "number of sites", ylab = "CPU time", cex.lab = 1.5)
points(n.nodes, Cpp.User, col = "blue", pch = 19)
points(n.nodes, R.User, col = "red", pch = 19)
lines(n.nodes, fit.cpp$fitted.values, col = "green", lty = 2)
lines(n.nodes, fit.R$fitted.values, col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "lm fit C++", "lm fit R"), fill = c("blue", "red", "green", "orange"), cex = 1.5)
