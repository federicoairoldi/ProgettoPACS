library(RcppAlphahull)
help(RcppAlphahull)
help("RcppAlphahull")
library(roxygen2)
document()
roxygen2::document()
install.packages("roxygen2")
install.packages("roxygen2")
library(devtools)
document()
help(my.delvor)
help(ashape)
help(RcppAlphahull)
C
??RcppAlphahull
document()
help(my.delvor)
library(RcppAlphahull)
help(my.delvor)
x = runif(10)
y = runif(10)
vordel = my.delvor(x, y)
help(my.delvor)
library(roxygen2)
document()
library(devtools)
document()
help(my.delvor)
plot(vordel)
plot.delvor.cpp(vordel)
plot.delvor.cpp(vordel)
require(RcppAlphahull)
# auxiliary function to search
search = function(ind1, ind2, mesh){
for(i in 1:dim(mesh)[1]){
if(mesh[i,"ind1"] == ind1 & mesh[i,"ind2"] == ind2)
return(TRUE)
if(mesh[i,"ind1"] == ind2 & mesh[i,"ind2"] == ind1)
return(TRUE)
}
return(FALSE)
}
print("executing test")
# contains those test cases in which infinite edge of delvor result are not contained
# in the MyGAL result
infedges = c()
# contains those test cases in which the number of the infinite edges of the two
# results are different
ninfedges = c()
# contains those test cases in which finite edge of delvor result are not contained
# in the MyGAL result
finedges = c()
# contains those test cases in which the number of the finite edges of the two
# results are different
nfinedges = c()
n = 50 # number of point to sample for the voronoi diagram tests
for(i in 1:1000){
print(i)
set.seed(i) # setting the seed for the test
x = runif(n) # sampling points
y = runif(n)
# calling the c++ and R function to compute voronoi diagram
vorcpp = my.delvor(x,y)
vorR = delvor(x,y)
# checking infinite edges
# same number of infinite edges? if not adding the test to the queue ninfedges
if(length(which(vorcpp$mesh[, "bp2"] == 1 | vorcpp$mesh[, "bp1"] == 1))
!= length(which(vorR$mesh[, "bp2"] == 1 | vorR$mesh[, "bp1"] == 1)))
ninfedges = c(ninfedges, i)
# same infinite edges? if not adding the test to the queue infedges
k = 0
tmp = vorR$mesh[which(vorR$mesh[,"bp2"] == 1 | vorR$mesh[, "bp1"] == 1), 1:2]
tmp2 = vorcpp$mesh[which(vorcpp$mesh[,"bp2"] == 1 | vorcpp$mesh[, "bp1"] == 1), 1:2]
for(i in 1:dim(tmp)[1])
k = k + !(search(tmp[i,"ind1"], tmp[i,"ind2"], tmp2))
if(k > 0)
infedges = c(infedges, i)
# checking finite edges
# same number of finite edges? if not adding the test to the queue nfinedges
if(length(which(vorcpp$mesh[, "bp2"] == 0 & vorcpp$mesh[, "bp1"] == 0))
!= length(which(vorR$mesh[, "bp2"] == 0 & vorR$mesh[, "bp1"] == 0)))
nfinedges = c(nfinedges, 1)
# same finite edges? if not adding the test to the queue finedges
k = 0
tmp = vorR$mesh[which(vorR$mesh[,"bp2"] == 0 & vorR$mesh[, "bp1"] == 0), 1:2]
tmp2 = vorcpp$mesh[which(vorcpp$mesh[,"bp2"] == 0 & vorcpp$mesh[, "bp1"] == 0), 1:2]
for(i in 1:dim(tmp)[1])
k = k + !(search(tmp[i,"ind1"], tmp[i,"ind2"], tmp2))
if(k > 0)
finedges = c(finedges, i)
}
require(alphahull)
print(i)
for(i in 1:1000){
print(i)
set.seed(i) # setting the seed for the test
x = runif(n) # sampling points
y = runif(n)
# calling the c++ and R function to compute voronoi diagram
vorcpp = my.delvor(x,y)
vorR = delvor(x,y)
# checking infinite edges
# same number of infinite edges? if not adding the test to the queue ninfedges
if(length(which(vorcpp$mesh[, "bp2"] == 1 | vorcpp$mesh[, "bp1"] == 1))
!= length(which(vorR$mesh[, "bp2"] == 1 | vorR$mesh[, "bp1"] == 1)))
ninfedges = c(ninfedges, i)
# same infinite edges? if not adding the test to the queue infedges
k = 0
tmp = vorR$mesh[which(vorR$mesh[,"bp2"] == 1 | vorR$mesh[, "bp1"] == 1), 1:2]
tmp2 = vorcpp$mesh[which(vorcpp$mesh[,"bp2"] == 1 | vorcpp$mesh[, "bp1"] == 1), 1:2]
for(i in 1:dim(tmp)[1])
k = k + !(search(tmp[i,"ind1"], tmp[i,"ind2"], tmp2))
if(k > 0)
infedges = c(infedges, i)
# checking finite edges
# same number of finite edges? if not adding the test to the queue nfinedges
if(length(which(vorcpp$mesh[, "bp2"] == 0 & vorcpp$mesh[, "bp1"] == 0))
!= length(which(vorR$mesh[, "bp2"] == 0 & vorR$mesh[, "bp1"] == 0)))
nfinedges = c(nfinedges, 1)
# same finite edges? if not adding the test to the queue finedges
k = 0
tmp = vorR$mesh[which(vorR$mesh[,"bp2"] == 0 & vorR$mesh[, "bp1"] == 0), 1:2]
tmp2 = vorcpp$mesh[which(vorcpp$mesh[,"bp2"] == 0 & vorcpp$mesh[, "bp1"] == 0), 1:2]
for(i in 1:dim(tmp)[1])
k = k + !(search(tmp[i,"ind1"], tmp[i,"ind2"], tmp2))
if(k > 0)
finedges = c(finedges, i)
}
infedges
ninfedges
finedges
nfinedges
source('~/Documenti/ProgettoPACS/Rscript.R')
ascpp = my.ashape(vorcpp, alpha = alpha)
rm(list = ls())
source("search.R")
utils::getSrcFilename()
# Federico Airoldi    matricola: 892377   codice persona: 10484065
#
# this script tests that my connection matrix retrieved from the MyGAL library has the
# same structure of the one returned by the "delvor" function of the package alphahull
#
#
# NB: this script is quite slow due to R inefficient allocation/problems with for
# cicles
utils::getSrcDirectory()
getSrcDirectory
getSrcDirectory()
# Federico Airoldi    matricola: 892377   codice persona: 10484065
#
# this script tests that my connection matrix retrieved from the MyGAL library has the
# same structure of the one returned by the "delvor" function of the package alphahull
#
#
# NB: this script is quite slow due to R inefficient allocation/problems with for
# cicles
rstudioapi::getActiveDocumentContext()
# Federico Airoldi    matricola: 892377   codice persona: 10484065
#
# this script tests that my connection matrix retrieved from the MyGAL library has the
# same structure of the one returned by the "delvor" function of the package alphahull
#
#
# NB: this script is quite slow due to R inefficient allocation/problems with for
# cicles
rstudioapi::getActiveDocumentContext()$path
setwd(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("search.R")
dirname(rstudioapi::getActiveDocumentContext()$path)
dirname(rstudioapi::getActiveDocumentContext()$path)
dirname(rstudioapi::getActiveDocumentContext()$path)
help(my.delvor)
require(alphahull)
require(RcppAlphahull)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("search.R")
print("executing test")
# contains those test cases in which infinite edge of delvor result are not contained
# in the MyGAL result
infedges = c()
# contains those test cases in which the number of the infinite edges of the two
# results are different
ninfedges = c()
# contains those test cases in which finite edge of delvor result are not contained
# in the MyGAL result
finedges = c()
# contains those test cases in which the number of the finite edges of the two
# results are different
nfinedges = c()
n = 50 # number of point to sample for the voronoi diagram tests
for(i in 1:1000){
print(i)     # print the number of the test on the command line (can be commented to save some time)
set.seed(i)  # setting the seed for the test (feel free to modify and set your own seed)
x = runif(n) # sampling points
y = runif(n)
# calling the RcppAlphahull and alphahull function to compute Voronoi diagram
vorcpp = my.delvor(x,y)
vorR = delvor(x,y)
# checking infinite edges
# same number of infinite edges? if not adding the test to the queue ninfedges
if(length(which(vorcpp$mesh[, "bp2"] == 1 | vorcpp$mesh[, "bp1"] == 1))
!= length(which(vorR$mesh[, "bp2"] == 1 | vorR$mesh[, "bp1"] == 1)))
ninfedges = c(ninfedges, i)
# same infinite edges? if not adding the test to the queue infedges
k = 0
tmp = vorR$mesh[which(vorR$mesh[,"bp2"] == 1 | vorR$mesh[, "bp1"] == 1), 1:2]
tmp2 = vorcpp$mesh[which(vorcpp$mesh[,"bp2"] == 1 | vorcpp$mesh[, "bp1"] == 1), 1:2]
for(i in 1:dim(tmp)[1])
k = k + !(search(tmp[i,"ind1"], tmp[i,"ind2"], tmp2))
if(k > 0)
infedges = c(infedges, i)
# checking finite edges
# same number of finite edges? if not adding the test to the queue nfinedges
if(length(which(vorcpp$mesh[, "bp2"] == 0 & vorcpp$mesh[, "bp1"] == 0))
!= length(which(vorR$mesh[, "bp2"] == 0 & vorR$mesh[, "bp1"] == 0)))
nfinedges = c(nfinedges, 1)
# same finite edges? if not adding the test to the queue finedges
k = 0
tmp = vorR$mesh[which(vorR$mesh[,"bp2"] == 0 & vorR$mesh[, "bp1"] == 0), 1:2]
tmp2 = vorcpp$mesh[which(vorcpp$mesh[,"bp2"] == 0 & vorcpp$mesh[, "bp1"] == 0), 1:2]
for(i in 1:dim(tmp)[1])
k = k + !(search(tmp[i,"ind1"], tmp[i,"ind2"], tmp2))
if(k > 0)
finedges = c(finedges, i)
}
infedges
ninfedges
finedges
nfinedges
rm(list = ls())
a =1
b = a+12
rm(list = c(a,b))
rm(list = c("a","b"))
require(alphahull)
require(RcppAlphahull)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("search.R")
print("executing test")
# contains those test cases in which infinite edge of delvor result are not contained
# in the MyGAL result
infedges = c()
# contains those test cases in which the number of the infinite edges of the two
# results are different
ninfedges = c()
# contains those test cases in which finite edge of delvor result are not contained
# in the MyGAL result
finedges = c()
# contains those test cases in which the number of the finite edges of the two
# results are different
nfinedges = c()
n = 50 # number of point to sample for the voronoi diagram tests
for(i in 1:1000){
if(i%%50==0) print(i)     # print the number of the test on the command line (can be commented to save some time)
set.seed(i)  # setting the seed for the test (feel free to modify and set your own seed)
x = runif(n) # sampling points
y = runif(n)
# calling the RcppAlphahull and alphahull function to compute Voronoi diagram
vorcpp = my.delvor(x,y)
vorR = delvor(x,y)
# checking infinite edges
# same number of infinite edges? if not adding the test to the queue ninfedges
if(length(which(vorcpp$mesh[, "bp2"] == 1 | vorcpp$mesh[, "bp1"] == 1))
!= length(which(vorR$mesh[, "bp2"] == 1 | vorR$mesh[, "bp1"] == 1)))
ninfedges = c(ninfedges, i)
# same infinite edges? if not adding the test to the queue infedges
k = 0
tmp = vorR$mesh[which(vorR$mesh[,"bp2"] == 1 | vorR$mesh[, "bp1"] == 1), 1:2]
tmp2 = vorcpp$mesh[which(vorcpp$mesh[,"bp2"] == 1 | vorcpp$mesh[, "bp1"] == 1), 1:2]
for(i in 1:dim(tmp)[1])
k = k + !(search(tmp[i,"ind1"], tmp[i,"ind2"], tmp2))
if(k > 0)
infedges = c(infedges, i)
# checking finite edges
# same number of finite edges? if not adding the test to the queue nfinedges
if(length(which(vorcpp$mesh[, "bp2"] == 0 & vorcpp$mesh[, "bp1"] == 0))
!= length(which(vorR$mesh[, "bp2"] == 0 & vorR$mesh[, "bp1"] == 0)))
nfinedges = c(nfinedges, 1)
# same finite edges? if not adding the test to the queue finedges
k = 0
tmp = vorR$mesh[which(vorR$mesh[,"bp2"] == 0 & vorR$mesh[, "bp1"] == 0), 1:2]
tmp2 = vorcpp$mesh[which(vorcpp$mesh[,"bp2"] == 0 & vorcpp$mesh[, "bp1"] == 0), 1:2]
for(i in 1:dim(tmp)[1])
k = k + !(search(tmp[i,"ind1"], tmp[i,"ind2"], tmp2))
if(k > 0)
finedges = c(finedges, i)
}
rm(list = c("k", "tmp", "tmp2", "i"))
infedges
ninfedges
finedges
nfinedges
rm(list = c("k", "tmp", "tmp2", "i", "vorcpp", "vorR", "x", "y"))
set.seed(-434)
set.seed(-434.7)
seed
set.seed(1)
x = runif(n) # sampling points
y = runif(n)
n=5
set.seed(1)
x = runif(n) # sampling points
y = runif(n)
x
y
set.seed(-1)
x = runif(n) # sampling points
y = runif(n)
x
y
set.seed(-1.1)
x = runif(n) # sampling points
y = runif(n)
x
y
set.seed(-1.5)
x = runif(n) # sampling points
y = runif(n)
x
y
set.seed(-111.5)
x = runif(n) # sampling points
y = runif(n)
x
y
set.seed(-111)
x = runif(n) # sampling points
y = runif(n)
x
y
help(delvor)
document()
library(RcppAlphahull)
View(search)
document()
library(devtools)
document()
library(roxygen2)
document()
library(root)
document()
library(devtools)
document()
help(my.delvor)
document()
help(my.delvor)
help("build")
document()
help(my.delvor)
document()
help(my.delvor)
help(my.delvor)
document()
help(my.delvor)
document()
help(my.delvor)
help(RcppAlphahull)
help(ggplot)
help(alphahull)
help(bdgraph)
library(bdgraph)
help("usethis")
roxygen2::roxygenise()
devtools::document()
devtools::document()
help(RcppAlphahull)
devtools::document()
help(RcppAlphahull)
devtools::document()
help(RcppAlphahull)
help(RcppAlphahull)
devtools::document()
devtools::document()
devtools::document()
help(RcppAlphahull)
library(RcppAlphahull)
n = 100
set.seed(309)
x = runif(n)
y = runif(n)
vorcpp = my.delvor(x,y)
devtools::document()
devtools::document()
devtools::document()
library(RcppAlphahull)
n = 100
set.seed(309)
x = runif(n)
y = runif(n)
vorcpp = my.delvor(x,y)
library(RcppAlphahull)
n = 100
set.seed(309)
x = runif(n)
y = runif(n)
vorcpp = my.delvor(x,y)
devtools::document()
library(RcppAlphahull)
n = 100
set.seed(309)
x = runif(n)
y = runif(n)
vorcpp = my.delvor(x,y)
devtools::document()
devtools::document()
devtools::document()
library(RcppAlphahull)
n = 100
set.seed(309)
x = runif(n)
y = runif(n)
vorcpp = my.delvor(x,y)
devtools::document()
library(RcppAlphahull)
vorcpp = my.delvor(x,y)
devtools::document()
library(RcppAlphahull)
vorR = delvor(x, y)
vorcpp = my.delvor(x,y)
library(RcppAlphahull)
vorcpp = my.delvor(x,y)
document()
help(RcppAlphahull)
help(my.delvor)
document()
help(my.delvor)
help(RcppAlphahull)
vorcpp = my.delvor(x,y)
