library(devtools)
document()
help(plot.delvor)
help(del.vor)
help(delvor)
n = 35
set.seed(353)
x = runif(n)
y = runif(n)
vorcpp = RcppAlphahull::delvor(x,y)
View(vorcpp)
document()
document()
help(delvor)
document()
help(delvor)
document()
help(delvor)
document()
help(delvor)
document()
help(delvor)
document()
help(delvor)
document()
help(plot.delvor)
library(RcppAlphahull)
help(plot.delvor)
help(ashape)
document()
help("ashape")
vorcpp = RcppAlphahull::delvor(x,y)
vorcpp = RcppAlphahull::delvor(vorcpp,2)
library(RcppAlphahull)
comp = complement(x,y,2)
View(comp)
vorR = alphahull::delvor(x, y)
alpha = 2
ahR = alphahull::ahull(vorR, alpha = alpha)
View(ahR$complement)
n = 35
set.seed(353)
x = runif(n)
y = runif(n)
n = 35
set.seed(353)
x = runif(n)
y = runif(n)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
alpha = 2
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(x, y, alpha = alpha)
plot(ahR)
plot(vorR, number = T, wpoints = F, wlines = "vor", col = "grey", xlim = c(0,1), ylim = c(0,1), asp = 1)
# plotting circles
wrow = which(ahR$complement[,3]>0)
for(i in wrow){
#invisible(readline(prompt="Press [enter] to continue"))
#Sys.sleep(0.5)
alphahull::arc(ahR$complement[i,1:2], ahR$complement[i,3], c(0,1), pi, col = "red", lty = 2)
points(ahR$complement[i,1],ahR$complement[i,2], pch = 19, col = "red")
}
wrow = which(ahcpp$complement[,3]>0)
for(i in wrow){
#invisible(readline(prompt="Press [enter] to continue"))
#Sys.sleep(0.5)
alphahull::arc(ahcpp$complement[i,1:2], ahcpp$complement[i,3], c(0,1), pi, col = "cyan", lty = 2)
points(ahcpp$complement[i,1],ahcpp$complement[i,2], pch = 19, col = "cyan")
}
plot(vorR, number = T, wpoints = F, wlines = "vor", col = "grey", xlim = c(0,1), ylim = c(-2,1), asp = 1)
# plotting circles
wrow = which(ahR$complement[,3]>0)
for(i in wrow){
#invisible(readline(prompt="Press [enter] to continue"))
#Sys.sleep(0.5)
alphahull::arc(ahR$complement[i,1:2], ahR$complement[i,3], c(0,1), pi, col = "red", lty = 2)
points(ahR$complement[i,1],ahR$complement[i,2], pch = 19, col = "red")
}
plot(vorR, number = T, wpoints = F, wlines = "vor", col = "grey", xlim = c(0,1), ylim = c(-2,1), asp = 1)
# plotting circles
wrow = which(ahR$complement[,3]>0)
for(i in wrow){
#invisible(readline(prompt="Press [enter] to continue"))
Sys.sleep(0.5)
alphahull::arc(ahR$complement[i,1:2], ahR$complement[i,3], c(0,1), pi, col = "red", lty = 2)
points(ahR$complement[i,1],ahR$complement[i,2], pch = 19, col = "red")
}
library(RcppAlphahull)
n = 35
set.seed(353)
x = runif(n)
y = runif(n)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = F))
alpha = 2
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
plot(asR, wpoints = T)
plot(ascpp, wpoints = T)
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(x, y, alpha = alpha)
plot(vorR, number = T, wpoints = F, wlines = "vor", col = "grey", xlim = c(0,1), ylim = c(-2,1), asp = 1)
View(ahR$complement)
View(ahcpp$complement)
library(RcppAlphahull)
ahcpp = RcppAlphahull::ahull(x, y, alpha = alpha)
library(RcppAlphahull)
library(RcppAlphahull)
ahcpp = RcppAlphahull::ahull(x, y, alpha = alpha)
library(RcppAlphahull)
ahcpp = RcppAlphahull::ahull(x, y, alpha = alpha)
library(RcppAlphahull)
ahcpp = RcppAlphahull::ahull(x, y, alpha = alpha)
# plotting circles
wrow = which(ahR$complement[,3]>0)
for(i in wrow){
#invisible(readline(prompt="Press [enter] to continue"))
Sys.sleep(0.5)
alphahull::arc(ahR$complement[i,1:2], ahR$complement[i,3], c(0,1), pi, col = "red", lty = 2)
points(ahR$complement[i,1],ahR$complement[i,2], pch = 19, col = "red")
}
wrow = which(ahcpp$complement[,3]>0)
for(i in wrow){
#invisible(readline(prompt="Press [enter] to continue"))
#Sys.sleep(0.5)
alphahull::arc(ahcpp$complement[i,1:2], ahcpp$complement[i,3], c(0,1), pi, col = "cyan", lty = 2)
points(ahcpp$complement[i,1],ahcpp$complement[i,2], pch = 19, col = "cyan")
}
View(ahR$complement)
View(ahcpp$complement)
/* Returns the sign of the given value:
* - 1 if positive
* - -1 if negative
* - 0 if null
* NB: control with tollerance since I'm working with floating point
*/
template<typename T>
int sign(const T& value){
T eps = 10e-10;
if( std::fabs(value)<=eps )// std::numeric_limits<T>::epsilon()
return 0;
if(value > T(0))
return 1;
// otherwise value < T(0))
return -1;
}
alpha = 0.1
ahR = alphahull::ahull(x, y, alpha = alpha)
ahcpp = RcppAlphahull::ahull(x, y, alpha = alpha)
ahR = alphahull::ahull(x, y, alpha = alpha)
plot(vorR, number = T, wpoints = F, wlines = "vor", col = "grey", xlim = c(0,1), ylim = c(-2,1), asp = 1)
View(ahR$complement)
View(ahcpp$complement)
# plotting circles
wrow = which(ahR$complement[,3]>0)
for(i in wrow){
#invisible(readline(prompt="Press [enter] to continue"))
#Sys.sleep(0.5)
alphahull::arc(ahR$complement[i,1:2], ahR$complement[i,3], c(0,1), pi, col = "red", lty = 2)
points(ahR$complement[i,1],ahR$complement[i,2], pch = 19, col = "red")
}
wrow = which(ahcpp$complement[,3]>0)
for(i in wrow){
#invisible(readline(prompt="Press [enter] to continue"))
#Sys.sleep(0.5)
alphahull::arc(ahcpp$complement[i,1:2], ahcpp$complement[i,3], c(0,1), pi, col = "cyan", lty = 2)
points(ahcpp$complement[i,1],ahcpp$complement[i,2], pch = 19, col = "cyan")
}
help(delvor)
View(ahcpp)
help(ashape)
library(RcppAlphahull)
help(ahull)
help(ahull)
library(RcppAlphahull)
help(delvor)
help(ahull)
help(ashape)
library(RcppAlphahull)
help(ahull)
help(ashape)
help("RcppAlphahull")
help(alphahull)
help("alphahull)
help("alphahull")
help(ggplot)
help(abind)
help(igraph)
library(igraph)
help(igraph)
library(RcppAlphahull)
help("RcppAlphahull")
library(RcppAlphahull)
document()
help(delvor)
library(RcppAlphahull)
help(delvor)
library(RcppAlphahull)
help("RcppAlphahull")
tmp = RcppAlphahull::complement(x,y,alpha = 2)
tmp = RcppAlphahull::complement(vorcpp,alpha = 2)
tmp = RcppAlphahull::complement(ascpp,alpha = 2)
help(complement)
alpha = 0.1
ahR = alphahull::ahull(x, y, alpha = alpha)
ahcpp = RcppAlphahull::ahull(x, y, alpha = alpha)
plot(vorR, number = T, wpoints = F, wlines = "vor", col = "grey", xlim = c(0,1), ylim = c(-2,1), asp = 1)
# plotting arcs
wrow = which(ahR$complement[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahR$complement[i,1:2], ahR$complement[i,3], ahR$complement[i,17:18], ahR$complement[i,19], col = "red", lty = 2)
}
wrow = which(ahcpp$complement[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahcpp$complement[i,1:2], ahcpp$complement[i,3], ahcpp$complement[i,17:18], ahcpp$complement[i,19], col = "cyan", lty = 2)
}
plot(vorR, number = T, wpoints = F, wlines = "vor", col = "grey", xlim = c(0,1), ylim = c(0,1), asp = 1)
# plotting arcs
wrow = which(ahR$complement[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahR$complement[i,1:2], ahR$complement[i,3], ahR$complement[i,17:18], ahR$complement[i,19], col = "red", lty = 2)
}
View(ahR$arcs)
plot(vorR, number = T, wpoints = F, wlines = "vor", col = "grey", xlim = c(0,1), ylim = c(0,1), asp = 1)
# plotting arcs
wrow = which(ahR$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahR$arcs[i,1:2], ahR$arcs[i,3], ahR$arcs[i,4:5], ahR$arcs[i,6], col = "red", lty = 2)
}
wrow = which(ahcpp$complement[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahcpp$complement[i,1:2], ahcpp$complement[i,3], ahcpp$complement[i,17:18], ahcpp$complement[i,19], col = "cyan", lty = 2)
}
# plotting arcs
wrow = which(ahR$arcs[,3]>0)
for(i in wrow){
# invisible(readline(prompt="Press [enter] to continue"))
alphahull::arc(ahR$arcs[i,1:2], ahR$arcs[i,3], ahR$arcs[i,4:5], ahR$arcs[i,6], col = "red", lty = 2)
}
plot(ahcpp)
system.time(alphahull::ahull(vorR, alpha = alpha))
system.time(RcppAlphahull::ahull(vorcpp, alpha = alpha))
library(RcppAlphahull)
library(RcppAlphahull)
inahull(ahcpp, c(0,1))
help(inahull)
alphahull::inahull(ahcpp, c(0,1))
ahR$xahull
ahR$arcs
install_github("https://github.com/federicoairoldi/ProgettoPACS/tree/master/RcppAlphahull")
install_github("https://github.com/federicoairoldi/ProgettoPACS")
help("install_github")
install_github("https://github.com/federicoairoldi/ProgettoPACS", subdir = "RcppAlphahull")
help("RcppAlphahull")
library(RcppAlphahull)
library(RcppAlphahull)
library(RcppAlphahull)
n = 35
set.seed(353)
x = runif(n)
y = runif(n)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
alpha = 0.1
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
asR$alpha.extremes
ascpp$alpha.extremes
View(asR$edges)
View(ascpp$edges)
plot(asR, wpoints = T)
plot(ascpp, wpoints = T)
alpha = 0.1
ahR = alphahull::ahull(x, y, alpha = alpha)
ahcpp = RcppAlphahull::ahull(x, y, alpha = alpha)
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = F))
plot(asR, wpoints = T)
plot(ascpp, wpoints = T)
library(RcppAlphahull)
