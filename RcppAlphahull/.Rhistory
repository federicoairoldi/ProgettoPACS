n.test = 1000
for(i in 1:n.test){
if(i%%50==0) print(i) # print the number of the test on the command line (can be commented to save some time)
set.seed(i)  # setting the seed for the test (feel free to modify and set your own seed)
x = runif(n,0,10) # sampling points
y = runif(n,0,10)
alpha = runif(1); # sampling alpha
# calling the RcppAlphahull and alphahull function to compute the alpha shape
ascpp = RcppAlphahull::ashape(x,y,alpha)
asR = alphahull::ashape(x,y,alpha)
# check lengths
# do the alpha shapes have the same length? if not adding the test to the queue not.matching.length
if( dim(asR$edges)[1]!=0 )
perc.length.diff = c(perc.length.diff, abs( (asR$length - ascpp$length)/ascpp$length ))
else
perc.length.diff = c(perc.length.diff, 0)
# checking edges
# same number of edges? if not adding the test to the queue not.matching.size
if(dim(asR$edges)[1]!=dim(ascpp$edges)[1])
not.matching.size = c(not.matching.size, i)
# same edges for the alpha? if not adding the test to the queue of wrong tests
k = 0
if(dim(asR$edges)[1]!=0)
for(i in 1:dim(asR$edges)[1])
k = k + !(search(asR$edges[i,"ind1"], asR$edges[i,"ind2"], ascpp$edges))
if(k > 0)
not.matching = c(not.matching, i)
}
not.matching.length = which(perc.length.diff >= eps)
rm(list = c("k", "i", "ascpp", "asR", "x", "y"))
not.matching.size
not.matching.length
not.matching
# calling the RcppAlphahull and alphahull function to compute the alpha shape
ascpp = RcppAlphahull::ashape(x,y,alpha)
# calling the RcppAlphahull and alphahull function to compute the alpha shape
ascpp = RcppAlphahull::ashape(x,y,alpha)
x
x = runif(n,0,10) # sampling points
require(alphahull)
require(RcppAlphahull)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("search.R")
print("executing test")
# contains those test cases in which the ashape matrice don't coincide
not.matching = c()
not.matching.size = c()
not.matching.length = c()
perc.length.diff = c()
eps = 1e-15 # tollerance for confrontation of alpha shape lengths
# up to 1e-15 lengths are the "same"
n = 50 # number of point to sample for the voronoi diagram tests (feel free to change)
n.test = 1000
for(i in 1:n.test){
if(i%%50==0) print(i) # print the number of the test on the command line (can be commented to save some time)
set.seed(i)  # setting the seed for the test (feel free to modify and set your own seed)
x = runif(n,0,10) # sampling points
y = runif(n,0,10)
alpha = runif(1); # sampling alpha
# calling the RcppAlphahull and alphahull function to compute the alpha shape
ascpp = RcppAlphahull::ashape(x,y,alpha)
asR = alphahull::ashape(x,y,alpha)
# check lengths
# do the alpha shapes have the same length? if not adding the test to the queue not.matching.length
if( dim(asR$edges)[1]!=0 )
perc.length.diff = c(perc.length.diff, abs( (asR$length - ascpp$length)/ascpp$length ))
else
perc.length.diff = c(perc.length.diff, 0)
# checking edges
# same number of edges? if not adding the test to the queue not.matching.size
if(dim(asR$edges)[1]!=dim(ascpp$edges)[1])
not.matching.size = c(not.matching.size, i)
# same edges for the alpha? if not adding the test to the queue of wrong tests
k = 0
if(dim(asR$edges)[1]!=0)
for(i in 1:dim(asR$edges)[1])
k = k + !(search(asR$edges[i,"ind1"], asR$edges[i,"ind2"], ascpp$edges))
if(k > 0)
not.matching = c(not.matching, i)
}
not.matching.length = which(perc.length.diff >= eps)
rm(list = c("k", "i", "ascpp", "asR", "x", "y"))
not.matching.size
not.matching.length
not.matching
# Federico Airoldi    matricola: 892377   codice persona: 10484065
#
# this script tests that my alpha-shape object retrieved starting from a delvor objectt has the same
# structure of the one returned by the "ashape" function of the package alphahull
#
# parameters that can be modified:
# - n:                 number of sites
# - n.test:            number of tests to be excecuted
# - alpha:             parameter for alpha shape computation (may be fixed for each test)
# - set.seed(rule(i)): seed for the i-th test, one can assign any rule for the seed used to sample the
#                      points. rule(i) is a function that returns a number (even a floating point one)
#
# NB: this script is quite slow due to R inefficient allocation/problems with for cicles
require(alphahull)
require(RcppAlphahull)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("search.R")
print("executing test")
# contains those test cases in which the ashape matrice don't coincide
not.matching = c()
not.matching.size = c()
not.matching.length = c()
perc.length.diff = c()
eps = 1e-15 # tollerance for confrontation of alpha shape lengths
# up to 1e-15 lengths are the "same"
n = 50 # number of point to sample for the voronoi diagram tests (feel free to change)
n.test = 1000
for(i in 1:n.test){
if(i%%50==0) print(i) # print the number of the test on the command line (can be commented to save some time)
set.seed(i)  # setting the seed for the test (feel free to modify and set your own seed)
x = runif(n,0,10) # sampling points
y = runif(n,0,10)
alpha = runif(1); # sampling alpha
# calling the RcppAlphahull and alphahull function to compute the alpha shape
ascpp = RcppAlphahull::ashape(x,y,alpha)
asR = alphahull::ashape(x,y,alpha)
# check lengths
# do the alpha shapes have the same length? if not adding the test to the queue not.matching.length
if( dim(asR$edges)[1]!=0 )
perc.length.diff = c(perc.length.diff, abs( (asR$length - ascpp$length)/ascpp$length ))
else
perc.length.diff = c(perc.length.diff, 0)
# checking edges
# same number of edges? if not adding the test to the queue not.matching.size
if(dim(asR$edges)[1]!=dim(ascpp$edges)[1])
not.matching.size = c(not.matching.size, i)
# same edges for the alpha? if not adding the test to the queue of wrong tests
k = 0
if(dim(asR$edges)[1]!=0)
for(i in 1:dim(asR$edges)[1])
k = k + !(search(asR$edges[i,"ind1"], asR$edges[i,"ind2"], ascpp$edges))
if(k > 0)
not.matching = c(not.matching, i)
}
not.matching.length = which(perc.length.diff >= eps)
View(ascpp)
View(asR)
library(RcppAlphahull)
# Federico Airoldi    matricola: 892377   codice persona: 10484065
#
# this script tests that my alpha-shape object retrieved starting from a delvor objectt has the same
# structure of the one returned by the "ashape" function of the package alphahull
#
# parameters that can be modified:
# - n:                 number of sites
# - n.test:            number of tests to be excecuted
# - alpha:             parameter for alpha shape computation (may be fixed for each test)
# - set.seed(rule(i)): seed for the i-th test, one can assign any rule for the seed used to sample the
#                      points. rule(i) is a function that returns a number (even a floating point one)
#
# NB: this script is quite slow due to R inefficient allocation/problems with for cicles
require(alphahull)
require(RcppAlphahull)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("search.R")
print("executing test")
# contains those test cases in which the ashape matrice don't coincide
not.matching = c()
not.matching.size = c()
not.matching.length = c()
perc.length.diff = c()
eps = 1e-15 # tollerance for confrontation of alpha shape lengths
# up to 1e-15 lengths are the "same"
n = 50 # number of point to sample for the voronoi diagram tests (feel free to change)
n.test = 1000
for(i in 1:n.test){
if(i%%50==0) print(i) # print the number of the test on the command line (can be commented to save some time)
set.seed(i)  # setting the seed for the test (feel free to modify and set your own seed)
x = runif(n,0,10) # sampling points
y = runif(n,0,10)
alpha = runif(1); # sampling alpha
# calling the RcppAlphahull and alphahull function to compute the alpha shape
ascpp = RcppAlphahull::ashape(x,y,alpha)
asR = alphahull::ashape(x,y,alpha)
# check lengths
# do the alpha shapes have the same length? if not adding the test to the queue not.matching.length
if( dim(asR$edges)[1]!=0 )
perc.length.diff = c(perc.length.diff, abs( (asR$length - ascpp$length)/ascpp$length ))
else
perc.length.diff = c(perc.length.diff, 0)
# checking edges
# same number of edges? if not adding the test to the queue not.matching.size
if(dim(asR$edges)[1]!=dim(ascpp$edges)[1])
not.matching.size = c(not.matching.size, i)
# same edges for the alpha? if not adding the test to the queue of wrong tests
k = 0
if(dim(asR$edges)[1]!=0)
for(i in 1:dim(asR$edges)[1])
k = k + !(search(asR$edges[i,"ind1"], asR$edges[i,"ind2"], ascpp$edges))
if(k > 0)
not.matching = c(not.matching, i)
}
not.matching.length = which(perc.length.diff >= eps)
library(RcppAlphahull)
# calling the RcppAlphahull and alphahull function to compute the alpha shape
ascpp = RcppAlphahull::ashape(x,y,alpha)
library(RcppAlphahull)
# Federico Airoldi    matricola: 892377   codice persona: 10484065
#
# this script tests that my alpha-shape object retrieved starting from a delvor objectt has the same
# structure of the one returned by the "ashape" function of the package alphahull
#
# parameters that can be modified:
# - n:                 number of sites
# - n.test:            number of tests to be excecuted
# - alpha:             parameter for alpha shape computation (may be fixed for each test)
# - set.seed(rule(i)): seed for the i-th test, one can assign any rule for the seed used to sample the
#                      points. rule(i) is a function that returns a number (even a floating point one)
#
# NB: this script is quite slow due to R inefficient allocation/problems with for cicles
require(alphahull)
require(RcppAlphahull)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("search.R")
print("executing test")
# contains those test cases in which the ashape matrice don't coincide
not.matching = c()
not.matching.size = c()
not.matching.length = c()
perc.length.diff = c()
eps = 1e-15 # tollerance for confrontation of alpha shape lengths
# up to 1e-15 lengths are the "same"
n = 50 # number of point to sample for the voronoi diagram tests (feel free to change)
n.test = 1000
for(i in 1:n.test){
if(i%%50==0) print(i) # print the number of the test on the command line (can be commented to save some time)
set.seed(i)  # setting the seed for the test (feel free to modify and set your own seed)
x = runif(n,0,10) # sampling points
y = runif(n,0,10)
alpha = runif(1); # sampling alpha
# calling the RcppAlphahull and alphahull function to compute the alpha shape
ascpp = RcppAlphahull::ashape(x,y,alpha)
asR = alphahull::ashape(x,y,alpha)
# check lengths
# do the alpha shapes have the same length? if not adding the test to the queue not.matching.length
if( dim(asR$edges)[1]!=0 )
perc.length.diff = c(perc.length.diff, abs( (asR$length - ascpp$length)/ascpp$length ))
else
perc.length.diff = c(perc.length.diff, 0)
# checking edges
# same number of edges? if not adding the test to the queue not.matching.size
if(dim(asR$edges)[1]!=dim(ascpp$edges)[1])
not.matching.size = c(not.matching.size, i)
# same edges for the alpha? if not adding the test to the queue of wrong tests
k = 0
if(dim(asR$edges)[1]!=0)
for(i in 1:dim(asR$edges)[1])
k = k + !(search(asR$edges[i,"ind1"], asR$edges[i,"ind2"], ascpp$edges))
if(k > 0)
not.matching = c(not.matching, i)
}
not.matching.length = which(perc.length.diff >= eps)
rm(list = c("k", "i", "ascpp", "asR", "x", "y"))
not.matching.size
not.matching.length
not.matching
n = 10
set.seed(n)
x = runif(n)
y = runif(n)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
alpha = 1.2
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
plot(asR, wpoints = F)
plot(ascpp, wpoints = F)
plot(asR, wpoints = F)
plot(ascpp, wpoints = F)
plot(asR, wpoints = T)
plot(ascpp, wpoints = T)
n = 50
set.seed(n)
x = runif(n)
y = runif(n)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
alpha = 1.2
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
asR$alpha.extremes
ascpp$alpha.extremes
plot(asR, wpoints = T)
plot(ascpp, wpoints = T)
View(asR$edges)
View(ascpp$edges)
n = 8
set.seed(n)
x = runif(n)
y = runif(n)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
alpha = 1.2
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
asR$alpha.extremes
ascpp$alpha.extremes
View(asR$edges)
View(ascpp$edges)
plot(asR, wpoints = T)
plot(ascpp, wpoints = T)
library(RcppAlphahull)
View(search)
# Federico Airoldi    matricola: 892377   codice persona: 10484065
#
# this script tests that my alpha-shape object retrieved starting from a delvor objectt has the same
# structure of the one returned by the "ashape" function of the package alphahull
#
# parameters that can be modified:
# - n:                 number of sites
# - n.test:            number of tests to be excecuted
# - alpha:             parameter for alpha shape computation (may be fixed for each test)
# - set.seed(rule(i)): seed for the i-th test, one can assign any rule for the seed used to sample the
#                      points. rule(i) is a function that returns a number (even a floating point one)
#
# NB: this script is quite slow due to R inefficient allocation/problems with for cicles
require(alphahull)
require(RcppAlphahull)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("search.R")
print("executing test")
# contains those test cases in which the ashape matrice don't coincide
not.matching = c()
not.matching.size = c()
not.matching.length = c()
perc.length.diff = c()
eps = 1e-15 # tollerance for confrontation of alpha shape lengths
# up to 1e-15 lengths are the "same"
n = 50 # number of point to sample for the voronoi diagram tests (feel free to change)
n.test = 1000
for(i in 1:n.test){
if(i%%50==0) print(i) # print the number of the test on the command line (can be commented to save some time)
set.seed(i)  # setting the seed for the test (feel free to modify and set your own seed)
x = runif(n,0,10) # sampling points
y = runif(n,0,10)
alpha = runif(1); # sampling alpha
# calling the RcppAlphahull and alphahull function to compute the alpha shape
ascpp = RcppAlphahull::ashape(x,y,alpha)
asR = alphahull::ashape(x,y,alpha)
# check lengths
# do the alpha shapes have the same length? if not adding the test to the queue not.matching.length
if( dim(asR$edges)[1]!=0 )
perc.length.diff = c(perc.length.diff, abs( (asR$length - ascpp$length)/ascpp$length ))
else
perc.length.diff = c(perc.length.diff, 0)
# checking edges
# same number of edges? if not adding the test to the queue not.matching.size
if(dim(asR$edges)[1]!=dim(ascpp$edges)[1])
not.matching.size = c(not.matching.size, i)
# same edges for the alpha? if not adding the test to the queue of wrong tests
k = 0
if(dim(asR$edges)[1]!=0)
for(i in 1:dim(asR$edges)[1])
k = k + !(search(asR$edges[i,"ind1"], asR$edges[i,"ind2"], ascpp$edges))
if(k > 0)
not.matching = c(not.matching, i)
}
not.matching.length = which(perc.length.diff >= eps)
rm(list = c("k", "i", "ascpp", "asR", "x", "y"))
not.matching.size
not.matching.length
not.matching
n = 8
set.seed(n)
x = runif(n)
y = runif(n)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
alpha = 1.2
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
asR$alpha.extremes
ascpp$alpha.extremes
View(asR$edges)
View(ascpp$edges)
plot(asR, wpoints = T)
plot(ascpp, wpoints = T)
x = c(0.2, 0.3, 0,2 0.9)
x = c(0.2, 0.3, 0,2 0.9)
x = c(0.2, 0.3, 0.2, 0.9)
y = c(0.4, 0.7, 0.6, 0.9)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
system.time(alphahull::plot.delvor(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = T))
system.time(plot.delvor(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = T))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = T))
system.time(alphahull::plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = T))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = T))
alpha = 1.2
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
asR$alpha.extremes
ascpp$alpha.extremes
View(asR$edges)
plot(asR, wpoints = T)
plot(ascpp, wpoints = T)
n = 8
set.seed(n)
x = runif(n)
y = runif(n)
x[1] = 0.2
x[2] = 0.2
x[3] = 0.2
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
alpha = 1.2
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
plot(asR, wpoints = T)
plot(ascpp, wpoints = T)
n = 20
set.seed(n)
x = runif(n)
y = runif(n)
x[1] = 0.2
x[2] = 0.2
x[3] = 0.2
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
system.time(alphahull::plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = T))
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = T))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = T))
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = T))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'vor', number = T))
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = T))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'vor', number = T))
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
alpha = 1.2
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
plot(asR, wpoints = T)
plot(ascpp, wpoints = T)
plot(asR, wpoints = T)
plot(ascpp, wpoints = T)
library(RcppAlphahull)
# Federico Airoldi    matricola: 892377   codice persona: 10484065
#
# this script tests that my alpha-shape object retrieved starting from a delvor objectt has the same
# structure of the one returned by the "ashape" function of the package alphahull
#
# parameters that can be modified:
# - n:                 number of sites
# - n.test:            number of tests to be excecuted
# - alpha:             parameter for alpha shape computation (may be fixed for each test)
# - set.seed(rule(i)): seed for the i-th test, one can assign any rule for the seed used to sample the
#                      points. rule(i) is a function that returns a number (even a floating point one)
#
# NB: this script is quite slow due to R inefficient allocation/problems with for cicles
require(alphahull)
require(RcppAlphahull)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("search.R")
print("executing test")
# contains those test cases in which the ashape matrice don't coincide
not.matching = c()
not.matching.size = c()
not.matching.length = c()
perc.length.diff = c()
eps = 1e-15 # tollerance for confrontation of alpha shape lengths
# up to 1e-15 lengths are the "same"
n = 50 # number of point to sample for the voronoi diagram tests (feel free to change)
n.test = 1000
for(i in 1:n.test){
if(i%%50==0) print(i) # print the number of the test on the command line (can be commented to save some time)
set.seed(i)  # setting the seed for the test (feel free to modify and set your own seed)
x = runif(n,0,10) # sampling points
y = runif(n,0,10)
alpha = runif(1); # sampling alpha
# calling the RcppAlphahull and alphahull function to compute the alpha shape
ascpp = RcppAlphahull::ashape(x,y,alpha)
asR = alphahull::ashape(x,y,alpha)
# check lengths
# do the alpha shapes have the same length? if not adding the test to the queue not.matching.length
if( dim(asR$edges)[1]!=0 )
perc.length.diff = c(perc.length.diff, abs( (asR$length - ascpp$length)/ascpp$length ))
else
perc.length.diff = c(perc.length.diff, 0)
# checking edges
# same number of edges? if not adding the test to the queue not.matching.size
if(dim(asR$edges)[1]!=dim(ascpp$edges)[1])
not.matching.size = c(not.matching.size, i)
# same edges for the alpha? if not adding the test to the queue of wrong tests
k = 0
if(dim(asR$edges)[1]!=0)
for(i in 1:dim(asR$edges)[1])
k = k + !(search(asR$edges[i,"ind1"], asR$edges[i,"ind2"], ascpp$edges))
if(k > 0)
not.matching = c(not.matching, i)
}
not.matching.length = which(perc.length.diff >= eps)
rm(list = c("k", "i", "ascpp", "asR", "x", "y"))
not.matching.size
not.matching.length
not.matching
