library(RcppAlphahull)
vorcpp = my.delvor(x,y)
devtools::document()
library(RcppAlphahull)
vorR = delvor(x, y)
vorcpp = my.delvor(x,y)
library(RcppAlphahull)
vorcpp = my.delvor(x,y)
document()
help(RcppAlphahull)
help(my.delvor)
document()
help(my.delvor)
help(RcppAlphahull)
vorcpp = my.delvor(x,y)
library(RcppAlphahull)
n = 100
set.seed(309)
x = runif(n)
y = runif(n)
vorcpp = my.delvor(x,y)
system.time(plot.delvor.cpp(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = F))
library(dev√π)
library(devtools)
install_github("https://github.com/federicoairoldi/RcppAlphahull")
detach("package:RcppAlphahull", unload = TRUE)
remove.packages("RcppAlphahull", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
library(RcppAlphahull)
n = 100
set.seed(309)
x = runif(n)
y = runif(n)
vorcpp = my.delvor(x,y)
system.time(plot.delvor.cpp(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = F))
require(alphahull)
vorR = delvor(x, y)
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = F))
remove.packages("RcppAlphahull", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
vorcpp = my.delvor(x,y)
vorcpp = my.delvor(x,y)
install_github("https://github.com/federicoairoldi/RcppAlphahull")
library(devtools)
install_github("https://github.com/federicoairoldi/RcppAlphahull")
n = 100
set.seed(309)
x = runif(n)
y = runif(n)
vorcpp = my.delvor(x,y)
library(RcppAlphahull)
n = 100
set.seed(309)
x = runif(n)
y = runif(n)
vorcpp = my.delvor(x,y)
remove.packages(RcppAlphahull)
remove.packages("RcppAlphahull")
library(RcppAlphahull)
library(RcppAlphahull)
library(devtools)
document()
help(RcppAlphahull)
require(alphahull)
n = 100000
set.seed(309)
x = runif(n)
y = runif(n)
vorcpp = my.delvor(x,y)
system.time(ashape(vorcpp, alpha = alpha))
alpha = 0.05
system.time(ashape(vorcpp, alpha = alpha))
system.time(plot(my.delvor(x,y))
system.time(my.delvor(x,y))
system.time(delvor(x,y))
system.time(ashape(vorR, alpha = alpha))
system.time(ashape(vorcpp, alpha = alpha))
require(alphahull)
require(RcppAlphahull)
set.seed(7658)
n.nodes = c( seq(100,900,by=100),
seq(1000,9000,by=1000),
seq(10000,60000,by=10000))
relative = c()
RTime = c()
CppTime = c()
for(n in n.nodes){
print(paste("Simulation:",n))
x = runif(n)
y = runif(n)
res = benchmark("Cpp" = mydelvor(x, y), "R" = delvor(x, y), replications = 1)
CppTime = rbind(CppTime, res[which(res[,"test"] == "Cpp"), c("elapsed", "user.self", "sys.self")])
RTime = rbind(RTime, res[which(res[,"test"] == "R"), c("elapsed", "user.self", "sys.self")])
relative = c(relative, res[which(res[,"test"] == "R"), c("relative")])
}
tmp = cbind(CppTime, RTime)
Cpp.User = tmp[,2]
R.User = tmp[,5]
transfCpp = n.nodes*log(n.nodes, 2)
transfR = (n.nodes*log(n.nodes, 2))^2
fit.cpp = lm(Cpp.User ~ 0 + transfCpp)
summary(fit.cpp)
fit.R = lm(R.User ~ 0 + transfR)
summary(fit.R)
x11()
matplot(n.nodes, cbind(Cpp.User, R.User), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes, fit.cpp$fitted.values, col = "green", lty = 2)
lines(n.nodes, fit.R$fitted.values, col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"), )
R.User/Cpp.User
require(rbenchmark)
set.seed(7658)
n.nodes = c( seq(100,900,by=100),
seq(1000,9000,by=1000),
seq(10000,60000,by=10000))
relative = c()
RTime = c()
CppTime = c()
for(n in n.nodes){
print(paste("Simulation:",n))
x = runif(n)
y = runif(n)
res = benchmark("Cpp" = mydelvor(x, y), "R" = delvor(x, y), replications = 1)
CppTime = rbind(CppTime, res[which(res[,"test"] == "Cpp"), c("elapsed", "user.self", "sys.self")])
RTime = rbind(RTime, res[which(res[,"test"] == "R"), c("elapsed", "user.self", "sys.self")])
relative = c(relative, res[which(res[,"test"] == "R"), c("relative")])
}
tmp = cbind(CppTime, RTime)
Cpp.User = tmp[,2]
R.User = tmp[,5]
transfCpp = n.nodes*log(n.nodes, 2)
transfR = (n.nodes*log(n.nodes, 2))^2
fit.cpp = lm(Cpp.User ~ 0 + transfCpp)
summary(fit.cpp)
fit.R = lm(R.User ~ 0 + transfR)
summary(fit.R)
x11()
matplot(n.nodes, cbind(Cpp.User, R.User), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes, fit.cpp$fitted.values, col = "green", lty = 2)
lines(n.nodes, fit.R$fitted.values, col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"), )
R.User/Cpp.User
library(RcppAlphahull)
for(n in n.nodes){
print(paste("Simulation:",n))
x = runif(n)
y = runif(n)
res = benchmark("Cpp" = mydelvor(x, y), "R" = delvor(x, y), replications = 1)
CppTime = rbind(CppTime, res[which(res[,"test"] == "Cpp"), c("elapsed", "user.self", "sys.self")])
RTime = rbind(RTime, res[which(res[,"test"] == "R"), c("elapsed", "user.self", "sys.self")])
relative = c(relative, res[which(res[,"test"] == "R"), c("relative")])
}
for(n in n.nodes){
print(paste("Simulation:",n))
x = runif(n)
y = runif(n)
res = benchmark("Cpp" = my.delvor(x, y), "R" = delvor(x, y), replications = 1)
CppTime = rbind(CppTime, res[which(res[,"test"] == "Cpp"), c("elapsed", "user.self", "sys.self")])
RTime = rbind(RTime, res[which(res[,"test"] == "R"), c("elapsed", "user.self", "sys.self")])
relative = c(relative, res[which(res[,"test"] == "R"), c("relative")])
}
require(rbenchmark)
require(alphahull)
require(RcppAlphahull)
set.seed(7658)
n.nodes = c( seq(100,900,by=100),
seq(1000,9000,by=1000),
seq(10000,60000,by=10000))
relative = c()
RTime = c()
CppTime = c()
for(n in n.nodes){
print(paste("Simulation:",n))
x = runif(n)
y = runif(n)
res = benchmark("Cpp" = my.delvor(x, y), "R" = delvor(x, y), replications = 1)
CppTime = rbind(CppTime, res[which(res[,"test"] == "Cpp"), c("elapsed", "user.self", "sys.self")])
RTime = rbind(RTime, res[which(res[,"test"] == "R"), c("elapsed", "user.self", "sys.self")])
relative = c(relative, res[which(res[,"test"] == "R"), c("relative")])
}
tmp = cbind(CppTime, RTime)
Cpp.User = tmp[,2]
R.User = tmp[,5]
transfCpp = n.nodes*log(n.nodes, 2)
transfR = (n.nodes*log(n.nodes, 2))^2
fit.cpp = lm(Cpp.User ~ 0 + transfCpp)
summary(fit.cpp)
fit.R = lm(R.User ~ 0 + transfR)
summary(fit.R)
x11()
matplot(n.nodes, cbind(Cpp.User, R.User), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes, fit.cpp$fitted.values, col = "green", lty = 2)
lines(n.nodes, fit.R$fitted.values, col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"), )
R.User/Cpp.User
N = 10
x11()
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"), )
N = 20
x11()
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"), )
N = 15
x11()
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"), )
N = 15
x11()
tiff("speed.tiff")
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"), )
graphics.off()
library(RcppAlphahull)
n = 3
set.seed(309)
x = runif(n)
y = runif(n)
alpha = 0.5
ascpp = my.ashape(x, y, alpha = alpha)
ascpp = my.ashape(x, y, alpha = 0.5)
x
y
ascpp = my.ashape(x = x, y = y, alpha = 0.5)
vorcpp = my.delvor(x,y)
ascpp = my.ashape(vorcpp, alpha = 0.5)
help("my.ashape")
ascpp = my.ashape(vorcpp, alpha = 0.5)
ascpp = my.ashape(vorcpp, y = NULL, alpha = 0.5)
library(RcppAlphahull)
ascpp = my.ashape(vorcpp, alpha = 0.5)
ascpp = my.ashape(vorcpp, 0.5)
ascpp = my.ashape(vorcpp, alpha = 0.5)
ascpp = my.ashape(vorcpp, alpha = 0.5)
library(RcppAlphahull)
ascpp = my.ashape(vorcpp, alpha = 0.5)
library(RcppAlphahull)
ascpp = my.ashape(vorcpp, alpha = 0.5)
ascpp = my.ashape(vorcpp, alpha = 0.5)
library(RcppAlphahull)
ascpp = my.ashape(vorcpp, alpha = 0.5)
ascpp
library(RcppAlphahull)
ascpp = my.ashape(vorcpp, alpha = 0.5)
ascpp
vorcpp$mesh
library(RcppAlphahull)
ahR = ahull(vorR, alpha = alpha)
ascpp = my.ashape(vorcpp, alpha = 0.5)
ascpp
asR = ashape(vorR, alpha = alpha)
require(alphahull)
vorR = delvor(x, y)
asR = ashape(vorR, alpha = alpha)
asR
library(RcppAlphahull)
asR = ashape(vorR, alpha = alpha)
asR
library(RcppAlphahull)
library(RcppAlphahull)
system.time(my.ashape(vorcpp, alpha = alpha))
system.time(ashape(vorR, alpha = alpha))
ahR = ahull(vorR, alpha = alpha)
plot(ahR)
ahcpp = my.ahull(ascpp, alpha = alpha)
plot(ahcpp)
alpha = 0.5
asR = ashape(vorR, alpha = alpha)
plot(asR)
ascpp = my.ashape(vorcpp, alpha = 0.5)
plot(ascpp)
n = 50
set.seed(309)
x = runif(n)
y = runif(n)
vorcpp = my.delvor(x,y)
vorR = delvor(x, y)
asR = ashape(vorR, alpha = alpha)
ascpp = my.ashape(vorcpp, alpha = 0.5)
View(ahR)
View(asR)
View(ascpp)
n = 50
set.seed(309)
x = runif(n)
y = runif(n)
vorcpp = my.delvor(x,y)
vorR = delvor(x, y)
library(RcppAlphahull)
alpha = 0.5
asR = ashape(vorR, alpha = alpha)
ascpp = my.ashape(vorcpp, alpha = 0.5)
View(ascpp)
View(asR)
asR$alpha.extremes
ascpp$alpha.extremes
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = F))
system.time(plot.delvor.cpp(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = F))
n = 10
set.seed(309)
x = runif(n)
y = runif(n)
vorcpp = my.delvor(x,y)
vorR = delvor(x, y)
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = T))
system.time(plot.delvor.cpp(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = T))
asR = ashape(vorR, alpha = alpha)
ascpp = my.ashape(vorcpp, alpha = 0.5)
asR$alpha.extremes
ascpp = my.ashape(vorcpp, alpha = 0.5)
ascpp$alpha.extremes
library(RcppAlphahull)
vorcpp = my.delvor(x,y)
vorR = delvor(x, y)
alpha = 0.5
asR = ashape(vorR, alpha = alpha)
ascpp = my.ashape(vorcpp, alpha = 0.5)
asR$alpha.extremes
ascpp$alpha.extremes
library(RcppAlphahull)
ascpp = my.ashape(vorcpp, alpha = 0.5)
ascpp$alpha.extremes
vorcpp$mesh
library(RcppAlphahull)
ascpp = my.ashape(vorcpp, alpha = 0.5)
ascpp = my.ashape(vorcpp, alpha = 0.5)
library(RcppAlphahull)
ascpp = my.ashape(vorcpp, alpha = 0.5)
vorcpp$mesh[2,10]
vorcpp$mesh[2,10]
vorcpp$mesh[,11:12]
ascpp$alpha.extremes
asR$alpha.extremes
plot(asR)
View(vorcpp$mesh)
ascpp = my.ashape(vorcpp, alpha = 0.5)
library(RcppAlphahull)
ascpp = my.ashape(vorcpp, alpha = 0.5)
ascpp$alpha.extremes
library(RcppAlphahull)
ascpp = my.ashape(vorcpp, alpha = 0.5)
ascpp$alpha.extremes
library(RcppAlphahull)
ascpp = my.ashape(vorcpp, alpha = 0.5)
ascpp = my.ashape(vorcpp, alpha = 0.5)
library(RcppAlphahull)
iew(vorcpp$mesh)
View(vorcpp$mesh)
library(RcppAlphahull)
ascpp = my.ashape(vorcpp, alpha = 0.5)
library(RcppAlphahull)
ascpp = my.ashape(vorcpp, alpha = 0.5)
ascpp = my.ashape(x, y, alpha = 0.5)
library(RcppAlphahull)
ascpp = my.ashape(x, y, alpha = 0.5)
library(RcppAlphahull)
n = 10
set.seed(309)
x = runif(n)
y = runif(n)
vorcpp = my.delvor(x,y)
ahcpp = my.ahull(ascpp, alpha = alpha)
ascpp = my.ashape(vorcpp, alpha = 0.5)
vorR = delvor(x, y)
library(RcppAlphahull)
asR = ashape(vorR, alpha = alpha)
library(RcppAlphahull)
ascpp = my.ashape(vorcpp, alpha = 0.5)
ascpp$alpha.extremes
library(RcppAlphahull)
n = 10
set.seed(309)
x = runif(n)
y = runif(n)
vorcpp = my.delvor(x,y)
vorR = delvor(x, y)
alpha = 0.5
asR = ashape(vorR, alpha = alpha)
ascpp = my.ashape(vorcpp, alpha = alpha)
asR$alpha.extremes
ascpp$alpha.extremes
alpha = 3
asR = ashape(vorR, alpha = alpha)
ascpp = my.ashape(vorcpp, alpha = alpha)
asR$alpha.extremes
ascpp$alpha.extremes
system.time(ashape(vorR, alpha = alpha))
system.time(my.ashape(vorcpp, alpha = alpha))
n = 10000
set.seed(309)
x = runif(n)
y = runif(n)
vorcpp = my.delvor(x,y)
vorR = delvor(x, y)
system.time(ashape(vorR, alpha = alpha))
system.time(my.ashape(vorcpp, alpha = alpha))
library(RcppAlphahull)
ascpp = my.ashape(vorcpp, alpha = 0.5)
n = 100
set.seed(309)
x = runif(n)
y = runif(n)
vorcpp = my.delvor(x,y)
vorR = delvor(x, y)
alpha = 3
ascpp = my.ashape(vorcpp, alpha = alpha)
n = 10
set.seed(309)
x = runif(n)
y = runif(n)
system.time(plot.delvor.cpp(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = T))
vorcpp = my.delvor(x,y)
vorR = delvor(x, y)
system.time(plot.delvor.cpp(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = T))
vorcpp = my.delvor(x,y)
vorR = delvor(x, y)
alpha = 3
asR = ashape(vorR, alpha = alpha)
ascpp = my.ashape(vorcpp, alpha = alpha)
asR$alpha.extremes
ascpp$alpha.extremes
asR$alpha.extremes
ascpp$alpha.extremes
alpha = 1
asR = ashape(vorR, alpha = alpha)
ascpp = my.ashape(vorcpp, alpha = alpha)
asR$alpha.extremes
ascpp$alpha.extremes
plot(asR)
system.time(plot.delvor.cpp(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = T))
system.time(plot.delvor.cpp(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'vor', number = T))
both
system.time(plot.delvor.cpp(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = T))
x11()
system.time(plot.delvor.cpp(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = F,
xlim = c(0,1), ylim = c(0,1), wlines = 'both', number = T))
library(RcppAlphahull)
library(RcppAlphahull)
ascpp = my.ashape(vorcpp, alpha = alpha)
ascpp$edges
ascpp$alpha
plot(asR)
require(RcppAlphahull)
n = 10
set.seed(309)
x = runif(n)
y = runif(n)
vorcpp = my.delvor(x,y)
View(vorcpp$mesh)
x
y
library(RcppAlphahull)
library(RcppAlphahull)
library(RcppAlphahull)
n = 10
set.seed(309)
x = runif(n)
y = runif(n)
vorcpp = my.delvor(x,y)
vorR = delvor(x, y)
alpha = 1
asR = ashape(vorR, alpha = alpha)
ascpp = my.ashape(vorcpp, alpha = alpha)
ascpp = my.ashape(vorcpp, alpha = alpha)
library(RcppAlphahull)
require(alphahull)
vorcpp = my.delvor(x,y)
vorR = delvor(x, y)
alpha = 1
asR = ashape(vorR, alpha = alpha)
ascpp = my.ashape(vorcpp, alpha = alpha)
asR$alpha.extremes
ascpp$alpha.extremes
View(asR$edges)
View(ascpp$edges)
plot(asR)
plot(ahcpp)
plot(aScpp)
plot(ascpp)
ahR = ahull(vorR, alpha = alpha)
asR$alpha.extremes
ascpp$alpha.extremes
View(asR$edges)
View(ascpp$edges)
ascpp$edges
library(RcppAlphahull)
ascpp$edges
