n.test = 1000
used.n = c() # keeps track of the number of points sampled for the different tests
for(i in 1:n.test){
if(i%%50==0) print(i) # print the number of the test on the command line (can be commented to save some time)
set.seed(i)  # setting the seed for the test (feel free to modify and set your own seed)
n = sample(50:300, 1)
x = runif(n,0,10) # sampling points
y = runif(n,0,10)
alpha = runif(1); # sampling alpha
# calling the RcppAlphahull and alphahull function to compute the alpha shape
complementcpp = RcppAlphahull::complement(x,y,alpha)
complementR = alphahull::complement(x,y,alpha)
# check lengths
# do the alpha shapes have the same length? if not adding the test to the queue not.matching.length
if( dim(complementcpp)[1]!=dim(complementR)[1] )
not.matching.length = c(not.matching.length, i)
k = 0
for(type in c(-1, -2, -3, -4)){
planesR = complementR[which(complementR[,"r"] == type),]
planescpp = complementcpp[which(complementcpp[,"r"] == type),]
if(dim(planesR)[1]>0)
for(j in dim(planesR)[1])
k = k + !search_complement(planesR[j,"c1"], planesR[j,"c2"], planesR[j,"r"], planescpp, eps)
}
if(k > 0)
not.matching.planes = c(not.matching.planes, i)
k = 0
ballsR = complementR[which(complementR[,"r"] > 0),]
ballscpp = complementcpp[which(complementcpp[,"r"] > 0),]
if(dim(ballsR)[1]>0)
for(j in dim(ballsR)[1])
k = k + !search_complement(ballsR[j,"c1"], ballsR[j,"c2"], ballsR[j,"r"], ballscpp, eps)
if(k > 0)
not.matching.balls = c(not.matching.balls, i)
used.n = c(used.n, n)
}
# rm(list = c("k", "i", "complementR", "complementcpp", "x", "y"))
not.matching.length
not.matching.planes
not.matching.balls
# Federico Airoldi    matricola: 892377   codice persona: 10484065
#
# this script tests that my complement object retrieved starting from a delvor object has the same
# structure of the one returned by the "ahull" function of the package alphahull
#
# parameters that can be modified:
# - n:                 number of sites
# - n.test:            number of tests to be excecuted
# - alpha:             parameter for alpha shape computation (may be fixed for each test)
# - set.seed(rule(i)): seed for the i-th test, one can assign any rule for the seed used to sample the
#                      points. rule(i) is a function that returns a number (even a floating point one)
#
# NB: this script is quite slow due to R inefficient allocation/problems with for cicles
require(alphahull)
require(RcppAlphahull)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("search_complement.R")
print("executing test")
# contains those test cases in which the complement matrix don't coincide
not.matching.length = c() # different number of components
not.matching.planes = c() # different planes
not.matching.balls = c() # different balls
eps = 1e-11
n.test = 1000
used.n = c() # keeps track of the number of points sampled for the different tests
for(i in 1:n.test){
if(i%%50==0) print(i) # print the number of the test on the command line (can be commented to save some time)
set.seed(i)  # setting the seed for the test (feel free to modify and set your own seed)
n = sample(50:300, 1)
x = runif(n,0,10) # sampling points
y = runif(n,0,10)
alpha = runif(1); # sampling alpha
# calling the RcppAlphahull and alphahull function to compute the alpha shape
complementcpp = RcppAlphahull::complement(x,y,alpha)
complementR = alphahull::complement(x,y,alpha)
# check lengths
# do the alpha shapes have the same length? if not adding the test to the queue not.matching.length
if( dim(complementcpp)[1]!=dim(complementR)[1] )
not.matching.length = c(not.matching.length, i)
k = 0
for(type in c(-1, -2, -3, -4)){
planesR = complementR[which(complementR[,"r"] == type),]
planescpp = complementcpp[which(complementcpp[,"r"] == type),]
if(dim(planesR)[1]>0)
for(j in dim(planesR)[1])
k = k + !search_complement(planesR[j,"c1"], planesR[j,"c2"], planesR[j,"r"], planescpp, eps)
}
if(k > 0)
not.matching.planes = c(not.matching.planes, i)
k = 0
ballsR = complementR[which(complementR[,"r"] > 0),]
ballscpp = complementcpp[which(complementcpp[,"r"] > 0),]
if(dim(ballsR)[1]>0)
for(j in dim(ballsR)[1])
k = k + !search_complement(ballsR[j,"c1"], ballsR[j,"c2"], ballsR[j,"r"], ballscpp, eps)
if(k > 0)
not.matching.balls = c(not.matching.balls, i)
used.n = c(used.n, n)
}
# rm(list = c("k", "i", "complementR", "complementcpp", "x", "y"))
not.matching.length
not.matching.planes
not.matching.balls
# CONFRONTATION EXAMPLE
set.seed(3)
n = 300
theta = runif(n,0,2*pi)
r = sqrt(runif(n,0.25^2,0.5^2))
x = 0.5+r*cos(theta)
y = 0.5+r*sin(theta)
vorcpp = RcppAlphahull::delvor(x,y)
vorR =alphahull::delvor(x,y)
alpha = 0.1
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
par( mfrow = c(1,2))
plot(vorcpp, wlines = "vor", col = c("blue","black","black","black"), pch = 19, main = "RcppAlphahull", xlab = "x", ylab = "y", cex.main = 2, cex.lab = 1.8, asp = 1)
plot(vorR, wlines = "vor", col = c("blue","black","black","black"), pch = 19, main = "alphahull", xlab = "x", ylab = "y", cex.main = 2, cex.lab = 1.8, asp = 1)
x11(width = 960, height = 480)
x11(width = 12, height = 8)
par( mfrow = c(1,2))
plot(vorcpp, wlines = "vor", col = c("blue","black","black","black"), pch = 19, main = "RcppAlphahull", xlab = "x", ylab = "y", cex.main = 2, cex.lab = 1.8, asp = 1)
plot(vorR, wlines = "vor", col = c("blue","black","black","black"), pch = 19, main = "alphahull", xlab = "x", ylab = "y", cex.main = 2, cex.lab = 1.8, asp = 1)
par( mfrow = c(1,2) )
plot(ascpp, col = c("red", "blue"), asp = 1, pch = 19, main = "RcppAlphahull", xlab = "x", ylab = "y", cex.main = 2, cex.lab = 1.8)
plot(asR, col = c("red", "blue"), asp = 1, pch = 19, main = "alphahull", xlab = "x", ylab = "y", cex.main = 2, cex.lab = 1.8)
par( mfrow = c(1,2) )
plot(ahcpp, col = c("red", "blue", "blue"), asp = 1, pch = 19, main = "RcppAlphahull", xlab = "x", ylab = "y", cex.main = 2, cex.lab = 1.8)
plot(ahR, col = c("red", "blue", "blue"), asp = 1, pch = 19, main = "alphahull", xlab = "x", ylab = "y", cex.main = 2, cex.lab = 1.8)
library(RcppAlphahull)
library(RcppAlphahull)
n = 35 # 35
set.seed(353) # 353
x = runif(n)
y = runif(n)
theta = runif(300, 0, 2*pi)
r = runif(300, 0.2, 0.5)
x = r*cos(theta)+0.5
y = r*sin(theta)+0.5
system.time(RcppAlphahull::delvor(x,y))
system.time(alphahull::delvor(x,y))
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19,
wpoints = T, wlines = 'both', number = F))
source('~/Documenti/ProgettoPACS/test_scripts/Rscript.R', echo=TRUE)
alpha = 0.02
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1, add = T)
ahcpp$length
ahR$length
library(RcppAlphahull)
vorcpp = RcppAlphahull::delvor(x,y)
n = 35 # 35
set.seed(353) # 353
x = runif(n)
y = runif(n)
theta = runif(300, 0, 2*pi)
r = runif(300, 0.2, 0.5)
x = r*cos(theta)+0.5
y = r*sin(theta)+0.5
system.time(RcppAlphahull::delvor(x,y))
system.time(alphahull::delvor(x,y))
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
alpha = 1
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
asR$alpha.extremes
ascpp$alpha.extremes
plot(asR, wpoints = T)
plot(ascpp, wpoints = T, col = c("red","black"))
alpha = 0.02
ahR = alphahull::ahull(vorR, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
plot(ahR, col = c("red", "black", "black", "black", "black", "black"), asp = 1, add = T)
plot(vorR, number = F, wpoints = F, wlines = "vor", col = "grey", asp = 1)
# plotting circles
wrow = which(ahR$complement[,3]>0)
for(i in wrow){
#invisible(readline(prompt="Press [enter] to continue"))
# Sys.sleep(0.5)
alphahull::arc(ahR$complement[i,1:2], ahR$complement[i,3], c(0,1), pi, col = "red", lty = 2)
points(ahR$complement[i,1],ahR$complement[i,2], pch = 19, col = "red")
}
wrow = which(ahcpp$complement[,3]>0)
for(i in wrow){
#invisible(readline(prompt="Press [enter] to continue"))
#Sys.sleep(0.5)
alphahull::arc(ahcpp$complement[i,1:2], ahcpp$complement[i,3], c(0,1), pi, col = "cyan", lty = 2)
points(ahcpp$complement[i,1],ahcpp$complement[i,2], pch = 19, col = "cyan")
}
library(RcppAlphahull)
library(RcppAlphahull)
# plotting circles
wrow = which(ahR$complement[,3]>0)
for(i in wrow){
#invisible(readline(prompt="Press [enter] to continue"))
# Sys.sleep(0.5)
alphahull::arc(ahR$complement[i,1:2], ahR$complement[i,3], c(0,1), pi, col = "red", lty = 2)
points(ahR$complement[i,1],ahR$complement[i,2], pch = 19, col = "red")
}
wrow = which(ahcpp$complement[,3]>0)
for(i in wrow){
#invisible(readline(prompt="Press [enter] to continue"))
#Sys.sleep(0.5)
alphahull::arc(ahcpp$complement[i,1:2], ahcpp$complement[i,3], c(0,1), pi, col = "cyan", lty = 2)
points(ahcpp$complement[i,1],ahcpp$complement[i,2], pch = 19, col = "cyan")
}
library(RcppAlphahull)
remove.packages("alphahull", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
remove.packages("RcppAlphahull", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
devtools::install_github("https://github.com/federicoairoldi/ProgettoPACS", subdir = "RcppAlphahull")
devtools::install_github("https://github.com/federicoairoldi/ProgettoPACS", subdir = "RcppAlphahull", dependencies = T)
install.packages('alphahull')
install.packages("alphahull")
devtools::install_github("https://github.com/federicoairoldi/ProgettoPACS", subdir = "RcppAlphahull")
library(RcppAlphahull)
n = 5000
set.seed(1)
x = runif(n,0,10) # sampling the points
y = runif(n,0,10)
alpha = 0.1
system.time(RcppAlphahull::ahull(x,y,alpha))
system.time(alphahull::ahull(x,y,alpha))
system.time(RcppAlphahull::ahull(x,y,alpha))
system.time(alphahull::ahull(x,y,alpha))
n = 500
set.seed(1)
x = runif(n,0,10) # sampling the points
y = runif(n,0,10)
alpha = 0.1
system.time(alphahull::ahull(x,y,alpha))
system.time(RcppAlphahull::ahull(x,y,alpha))
system.time(RcppAlphahull::ahull(x,y,alpha))
system.time(alphahull::ahull(x,y,alpha))
system.time(RcppAlphahull::delvor(x,y))
system.time(alphahull::delvor(x,y))
n
n = 5000
x = runif(n,0,10)
y = runif(n,0,10)
system.time(RcppAlphahull::delvor(x,y))
system.time(alphahull::delvor(x,y))
system.time(alphahull::ahull(vorR, alpha = alpha))
system.time(RcppAlphahull::ahull(vorR, alpha = alpha))
system.time(RcppAlphahull::ahull(vorcpp, alpha = alpha))
n = 35 # 35
set.seed(353) # 353
x = runif(n)
y = runif(n)
vorcpp = RcppAlphahull::delvor(x,y)
alpha = 1
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(ascpp, wlines = "both")
plot.ashape
help(plot.ashape)
plot(ascpp, wlines = "both", add = T)
wlines = "both"
wlines <- match.arg(wlines)
if (is.null(col)) {
col <- c(1, 1, 1, 1, 1)
}
if (is.null(lwd)) {
lwd <- 1:2
}
lwd = 2
lwd <- rep(lwd, length.out = 2)
wlines <- match.arg(wlines)
wlines
plot.dd <- switch(wlines, none = TRUE, both = FALSE, del = FALSE,
vor = FALSE)
if (plot.dd) {
if (!add) {
if (is.null(xlim))
xlim <- range(x$x[, 1])
if (is.null(ylim))
ylim <- range(x$x[, 2])
plot(0, 0, type = "n", xlim = xlim, ylim = ylim,
axes = FALSE, ...)
axis(side = 1)
axis(side = 2)
}
if (wpoints) {
points(x$x, col = col[2], ...)
}
if (number) {
xoff <- 0.02 * diff(range(x$x[, 1]))
yoff <- 0.02 * diff(range(x$x[, 2]))
text(x$x[, 1] + xoff, x$x[, 2] + yoff, 1:(dim(x$x)[1]),
col = col[5], ...)
}
}
else {
plot.delvor(x$delvor.obj, add = add, wlines = wlines,
wpoints = wpoints, number = number, col = col[2:5],
lwd = lwd[1], xlim = xlim, ylim = ylim, ...)
}
plot.delvor(x$delvor.obj, add = add, wlines = wlines,
wpoints = wpoints, number = number, col = col[2:5],
lwd = lwd[1], xlim = xlim, ylim = ylim, ...)
RcppAlphahull::plot.delvor(x$delvor.obj, add = add, wlines = wlines,
wpoints = wpoints, number = number, col = col[2:5],
lwd = lwd[1], xlim = xlim, ylim = ylim, ...)
RcppAlphahull::plot.delvor(x$delvor.obj)
RcppAlphahull::plot.delvor(ah$delvor.obj)
RcppAlphahull::plot.delvor(ascpp$delvor.obj)
RcppAlphahull::plot.delvor(ascpp$delvor.obj, add = add, wlines = wlines,
wpoints = wpoints, number = number, col = col[2:5],
lwd = lwd[1], xlim = xlim, ylim = ylim)
col()
col
col = c(1,1,1,1,1,1)
RcppAlphahull::plot.delvor(ascpp$delvor.obj, add = add, wlines = wlines,
wpoints = wpoints, number = number, col = col[2:5],
lwd = lwd[1], xlim = xlim, ylim = ylim)
add = F
RcppAlphahull::plot.delvor(ascpp$delvor.obj, add = add, wlines = wlines,
wpoints = wpoints, number = number, col = col[2:5],
lwd = lwd[1], xlim = xlim, ylim = ylim)
xlim = c(0,1)
ylim = xlim
RcppAlphahull::plot.delvor(ascpp$delvor.obj, add = add, wlines = wlines,
wpoints = wpoints, number = number, col = col[2:5],
lwd = lwd[1], xlim = xlim, ylim = ylim)
number = F
RcppAlphahull::plot.delvor(ascpp$delvor.obj, add = add, wlines = wlines,
wpoints = wpoints, number = number, col = col[2:5],
lwd = lwd[1], xlim = xlim, ylim = ylim)
wpoints = T
RcppAlphahull::plot.delvor(ascpp$delvor.obj, add = add, wlines = wlines,
wpoints = wpoints, number = number, col = col[2:5],
lwd = lwd[1], xlim = xlim, ylim = ylim)
ashape <- x$edges
n2 <- dim(ashape)[1]
ashape <- ascpp$edges
n2 <- dim(ashape)[1]
if (n2 >= 1) {
for (i in 1:n2) {
segments(ashape[i, "x1"], ashape[i, "y1"], ashape[i,
"x2"], ashape[i, "y2"], col = col[1], lwd = lwd[2])
}
}
plot.ashape <-
function (x, add = FALSE, wlines = c("none", "both", "del", "vor"),
wpoints = TRUE, number = FALSE, col = NULL, xlim = NULL,
ylim = NULL, lwd = NULL, ...)
plot.ashape <-
function (x, add = FALSE, wlines = c("none", "both", "del", "vor"),
wpoints = TRUE, number = FALSE, col = NULL, xlim = NULL,
ylim = NULL, lwd = NULL, ...)
{
wlines <- match.arg(wlines)
if (is.null(class(x)) || class(x) != "ashape") {
cat("Argument is not of class ashape.\n")
return(invisible())
}
if (is.null(col)) {
col <- c(1, 1, 1, 1, 1)
}
else {
col <- rep(col, length.out = 5)
}
if (is.null(lwd)) {
lwd <- 1:2
}
else {
lwd <- rep(lwd, length.out = 2)
}
wlines <- match.arg(wlines)
plot.dd <- switch(wlines, none = TRUE, both = FALSE, del = FALSE,
vor = FALSE)
if (plot.dd) {
if (!add) {
if (is.null(xlim))
xlim <- range(x$x[, 1])
if (is.null(ylim))
ylim <- range(x$x[, 2])
plot(0, 0, type = "n", xlim = xlim, ylim = ylim,
axes = FALSE, ...)
axis(side = 1)
axis(side = 2)
}
if (wpoints) {
points(x$x, col = col[2], ...)
}
if (number) {
xoff <- 0.02 * diff(range(x$x[, 1]))
yoff <- 0.02 * diff(range(x$x[, 2]))
text(x$x[, 1] + xoff, x$x[, 2] + yoff, 1:(dim(x$x)[1]),
col = col[5], ...)
}
}
else {
RcppAlphahull::plot.delvor(x$delvor.obj, add = add, wlines = wlines,
wpoints = wpoints, number = number, col = col[2:5],
lwd = lwd[1], xlim = xlim, ylim = ylim, ...)
}
ashape <- x$edges
n2 <- dim(ashape)[1]
if (n2 >= 1) {
for (i in 1:n2) {
segments(ashape[i, "x1"], ashape[i, "y1"], ashape[i,
"x2"], ashape[i, "y2"], col = col[1], lwd = lwd[2])
}
}
}
plot(ascpp)
plot(ascpp, wlines = "both")
plot(ascpp)
plot.ashape(ascpp)
library(RcppAlphahull)
plot(ahcpp, col = c("cyan", "black", "black", "black", "black", "black"), asp = 1, add = T)
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
lines(c(vorcpp$mesh[i, "mx1"], vorcpp$mesh[i, "mx2"]),
c(vorcpp$mesh[i, "my1"], vorcpp$mesh[i, "my2"]),
col = ifelse(vorcpp$mesh[i, "bp2"] == 1 | vorcpp$mesh[i, "bp1"] == 1, "blue", "red"))
n = 35 # 35
set.seed(353) # 353
x = runif(n)
y = runif(n)
vorcpp = RcppAlphahull::delvor(x,y)
vorR = alphahull::delvor(x, y)
alpha = 1
asR = alphahull::ashape(vorR, alpha = alpha)
ascpp = RcppAlphahull::ashape(vorcpp, alpha = alpha)
asR$alpha.extremes
ascpp$alpha.extremes
plot(asR, wpoints = T)
plot(ascpp, wpoints = T, col = c("red","black"))
plot(asR, wpoints = T, wlines = 'both')
plot(ascpp, wpoints = T, wlines = 'both')
remove.packages("alphahull", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
library(RcppAlphahull)
help(plot.ashape)
install.packages('alphahull')
help(plot.ashape)
library(alphahull)
help(plot.ashape)
library(RcppAlphahull)
plot(asR, wpoints = T)
library(RcppAlphahull)
detach("package:alphahull", unload = TRUE)
plot(asR, wpoints = T)
plot(ascpp, wpoints = T, col = c("red","black"))
plot(asR, wpoints = T, wlines = 'both')
plot(ascpp, wpoints = T, col = c("red","black"), wlines = 'both')
plot(asR, wpoints = T, wlines = 'both')
plot(ascpp, wpoints = T, col = c("red","black"), wlines = 'both')
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19,
wpoints = T, wlines = 'vor', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19,
wpoints = T, wlines = 'vor', number = F))
library(RcppAlphahull)
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19,
wpoints = T, wlines = 'vor', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19,
wpoints = T, wlines = 'both', number = F))
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'vor', number = F))
system.time(plot(vorR, col = c("blue", "red", "black", "blue"), pch = 19, wpoints = T, wlines = 'both', number = F))
system.time(RcppAlphahull::plot.delvor(vorcpp, col = c("blue", "red", "black", "blue"), pch = 19,
wpoints = T, wlines = 'both', number = F))
plot(asR, wpoints = T, wlines = 'both')
plot(ascpp, wpoints = T, col = c("red","black"), wlines = 'both')
library(RcppAlphahull)
plot(asR, wpoints = T, wlines = 'both')
plot(ascpp, wpoints = T, col = c("red","black"), wlines = 'both')
library(RcppAlphahull)
knitr::opts_chunk$set(echo = TRUE)
library(RcppAlphahull) # loading the package
knitr::opts_chunk$set(echo = TRUE)
n = 50
set.seed(1)
set.seed(1)
x = runif(n) # sampling the points
y = runif(n)
alpha = 0.1
ahull.example = ahull(x,y,alpha)
plot(ahull.example, asp = 1, do.shape = T, wlines = "both", xlab = "", ylab = "", pch = 19,
col = c("red","pink","black","grey","grey","black"), main = "Your 1st test with RcppAlphahull")
library(RcppAlphahull)
knitr::opts_chunk$set(echo = TRUE)
plot(ahull.example, asp = 1, do.shape = T, wlines = "both", xlab = "", ylab = "", pch = 19,
col = c("red","pink","black","grey","grey","black"), main = "Your 1st test with RcppAlphahull")
library(RcppAlphahull)
knitr::opts_chunk$set(echo = TRUE)
plot(ahull.example, asp = 1, do.shape = T, wlines = "both", xlab = "", ylab = "", pch = 19,
col = c("red","pink","black","grey","grey","black"), main = "Your 1st test with RcppAlphahull")
plot(ahull.example, asp = 1, do.shape = T, wlines = "none", xlab = "", ylab = "", pch = 19,
col = c("red","pink","black","grey","grey","black"), main = "Your 1st test with RcppAlphahull")
plot(ascpp)
plot(ascpp, wlines = 'both')
plot(ascpp, wlines = 'vor')
plot(ascpp, wlines = 'vor')
plot(ahcpp, wlines = 'vor')
ahcpp = RcppAlphahull::ahull(vorcpp, alpha = alpha)
plot(ahcpp, wlines = 'vor')
plot(ahull.example, asp = 1, do.shape = T, wlines = "none", xlab = "", ylab = "", pch = 19,
col = c("red","pink","black","grey","grey","black"), main = "Your 1st test with RcppAlphahull")
plot(ahull.example, asp = 1, do.shape = T, wlines = "vor", xlab = "", ylab = "", pch = 19,
col = c("red","pink","black","grey","grey","black"), main = "Your 1st test with RcppAlphahull")
