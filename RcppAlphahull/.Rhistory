#graphics.off()
R.User/Cpp.User
Cpp.User = tmp[,2]
R.User = tmp[,5]
transfCpp = n.nodes*log(n.nodes, 2)
transfR = (n.nodes*log(n.nodes, 2))^2
fit.cpp = lm(Cpp.User ~ 0 + transfCpp)
summary(fit.cpp)
fit.R = lm(R.User ~ 0 + transfCpp)
summary(fit.R)
N = 15
x11()
# tiff("speed.tiff")
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"), )
#graphics.off()
R.User/Cpp.User
# Federico Airoldi    matricola: 892377   codice persona: 10484065
#
# this script tests the performances of the package alphahull with respect to the
# performances of the R/C++ hybrid package RcppAlphahull for the function ashape
#
# by setting a different number of sites the script computes the Voronoi diagram and Delanuay tesselation
# of n randomized point of R2 in [0;1]x[0;1] (if one likes, he can change the seed) and next computes the
# alpha hull complement for a random value of alpha.
#
# NB: this script compares speed of constructions of the alpha hull only, it doesn't consider the time
# spent to compute the Voronoi tesselation/Delanuay triangulation.
require(rbenchmark)
require(alphahull)
require(RcppAlphahull)
set.seed(7659)
n.nodes = c( seq(100,900,by=100),
seq(1000,9000,by=1000))
relative = c()
RTime = c()
CppTime = c()
for(n in n.nodes){
if(n%%50==0) print(paste("Simulation:",n))
x = runif(n)
y = runif(n)
alpha = runif(1)
vorcpp = RcppAlphahull::delvor(x, y)
vorR = alphahull::delvor(x, y)
res = benchmark("Cpp" = RcppAlphahull::ahull(vorcpp, alpha = alpha),
"R" = alphahull::ahull(vorR, alpha = alpha),
replications = 1)
CppTime = rbind(CppTime, res[which(res[,"test"] == "Cpp"), c("elapsed", "user.self", "sys.self")])
RTime = rbind(RTime, res[which(res[,"test"] == "R"), c("elapsed", "user.self", "sys.self")])
relative = c(relative, res[which(res[,"test"] == "R"), c("relative")])
}
tmp = cbind(CppTime, RTime)
Cpp.User = tmp[,2]
R.User = tmp[,5]
transfCpp = n.nodes*log(n.nodes, 2)
transfR = (n.nodes*log(n.nodes, 2))^2
fit.cpp = lm(Cpp.User ~ transfCpp)
summary(fit.cpp)
fit.R = lm(R.User ~ transfCpp)
summary(fit.R)
N = 15
x11()
# tiff("speed.tiff")
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"), )
#graphics.off()
R.User/Cpp.User
# Federico Airoldi    matricola: 892377   codice persona: 10484065
#
# this script tests the performances of the package alphahull with respect to the
# performances of the R/C++ hybrid package RcppAlphahull
#
# by setting a different number of sites the scripr compute the Voronoi diagram and
# Delanuay tesselation of n randomized point of R2 in [0;1]x[0;1] (if one likes, he
# can change the seed)
require(rbenchmark)
require(alphahull)
require(RcppAlphahull)
set.seed(7659)
n.nodes = c( seq(100,900,by=100),)
relative = c()
RTime = c()
CppTime = c()
for(n in n.nodes){
if(n%%50==0) print(paste("Simulation:",n))
x = runif(n)
y = runif(n)
res = benchmark("Cpp" = RcppAlphahull::delvor(x, y), "R" = alphahull::delvor(x, y), replications = 1)
CppTime = rbind(CppTime, res[which(res[,"test"] == "Cpp"), c("elapsed", "user.self", "sys.self")])
RTime = rbind(RTime, res[which(res[,"test"] == "R"), c("elapsed", "user.self", "sys.self")])
relative = c(relative, res[which(res[,"test"] == "R"), c("relative")])
}
tmp = cbind(CppTime, RTime)
Cpp.User = tmp[,2]
R.User = tmp[,5]
transfCpp = n.nodes*log(n.nodes, 2)
transfR = (n.nodes*log(n.nodes, 2))^2
fit.cpp = lm(Cpp.User ~ transfCpp)
summary(fit.cpp)
fit.R = lm(R.User ~ transfR)
summary(fit.R)
N = 15
x11()
#tiff("speed.tiff")
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"), )
#graphics.off()
R.User/Cpp.User
# Federico Airoldi    matricola: 892377   codice persona: 10484065
#
# this script tests the performances of the package alphahull with respect to the
# performances of the R/C++ hybrid package RcppAlphahull
#
# by setting a different number of sites the scripr compute the Voronoi diagram and
# Delanuay tesselation of n randomized point of R2 in [0;1]x[0;1] (if one likes, he
# can change the seed)
require(rbenchmark)
require(alphahull)
require(RcppAlphahull)
set.seed(7659)
n.nodes = c( seq(100,900,by=100))
relative = c()
RTime = c()
CppTime = c()
for(n in n.nodes){
if(n%%50==0) print(paste("Simulation:",n))
x = runif(n)
y = runif(n)
res = benchmark("Cpp" = RcppAlphahull::delvor(x, y), "R" = alphahull::delvor(x, y), replications = 1)
CppTime = rbind(CppTime, res[which(res[,"test"] == "Cpp"), c("elapsed", "user.self", "sys.self")])
RTime = rbind(RTime, res[which(res[,"test"] == "R"), c("elapsed", "user.self", "sys.self")])
relative = c(relative, res[which(res[,"test"] == "R"), c("relative")])
}
tmp = cbind(CppTime, RTime)
Cpp.User = tmp[,2]
R.User = tmp[,5]
transfCpp = n.nodes*log(n.nodes, 2)
transfR = (n.nodes*log(n.nodes, 2))^2
fit.cpp = lm(Cpp.User ~ transfCpp)
summary(fit.cpp)
fit.R = lm(R.User ~ transfR)
summary(fit.R)
N = 15
x11()
#tiff("speed.tiff")
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"), )
#graphics.off()
R.User/Cpp.User
graphics.off()
Cpp.User = tmp[,2]
R.User = tmp[,5]
transfCpp = n.nodes*log(n.nodes, 2)
transfR = (n.nodes*log(n.nodes, 2))^2
fit.cpp = lm(Cpp.User ~ transfCpp)
summary(fit.cpp)
fit.R = lm(R.User ~ transfR)
summary(fit.R)
N = 15
x11()
#tiff("speed.tiff")
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"), )
#graphics.off()
R.User/Cpp.User
# Federico Airoldi    matricola: 892377   codice persona: 10484065
#
# this script tests the performances of the package alphahull with respect to the
# performances of the R/C++ hybrid package RcppAlphahull
#
# by setting a different number of sites the scripr compute the Voronoi diagram and
# Delanuay tesselation of n randomized point of R2 in [0;1]x[0;1] (if one likes, he
# can change the seed)
require(rbenchmark)
require(alphahull)
require(RcppAlphahull)
set.seed(123)
n.nodes = c( seq(100,900,by=100))
relative = c()
RTime = c()
CppTime = c()
for(n in n.nodes){
if(n%%50==0) print(paste("Simulation:",n))
x = runif(n)
y = runif(n)
res = benchmark("Cpp" = RcppAlphahull::delvor(x, y), "R" = alphahull::delvor(x, y), replications = 1)
CppTime = rbind(CppTime, res[which(res[,"test"] == "Cpp"), c("elapsed", "user.self", "sys.self")])
RTime = rbind(RTime, res[which(res[,"test"] == "R"), c("elapsed", "user.self", "sys.self")])
relative = c(relative, res[which(res[,"test"] == "R"), c("relative")])
}
tmp = cbind(CppTime, RTime)
Cpp.User = tmp[,2]
R.User = tmp[,5]
transfCpp = n.nodes*log(n.nodes, 2)
transfR = (n.nodes*log(n.nodes, 2))^2
fit.cpp = lm(Cpp.User ~ transfCpp)
summary(fit.cpp)
fit.R = lm(R.User ~ transfR)
summary(fit.R)
N = 15
x11()
#tiff("speed.tiff")
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"), )
#graphics.off()
R.User/Cpp.User
N = 15
x11()
tiff("img/speed.tiff")
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"), )
graphics.off()
if(!dir.exists("img")) dir.create("img")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
if(!dir.exists("img")) dir.create("img")
for(test in c("ahull", "complement", "ashape", "delvor"))
source(paste("speed_test",test,sep="_"))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
for(test in c("ahull", "complement", "ashape", "delvor"))
source(paste("speed_test", test, sep="_"))
getwd()
for(test in c("ahull", "complement", "ashape", "delvor"))
source(paste("speed_test_", test,".R",sep=""))
paste("speed_test_", test,".R",sep="")
for(test in c("ahull", "complement", "ashape", "delvor"))
source(paste("speed_test_", test,".R",sep=""))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
for(test in c("ahull", "complement", "ashape", "delvor"))
source(paste("speed_test_", test,".R",sep=""))
paste("speed_test_", test,".R",sep="")
source(paste("speed_test_", test,".R",sep=""))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
for(test in c("ahull", "complement", "ashape", "delvor"))
source(paste("speed_test_", test,".R",sep=""))
# performs all the speed test scripts
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
for(test in c("ahull", "complement", "ashape", "delvor"))
source(paste("speed_test_", test,".R",sep=""))
source('~/Documenti/ProgettoPACS/test_scripts/speed_performer.R')
# performs all the speed test scripts
print("PERFORMING SPEED TESTS")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
for(test in c("ahull", "complement", "ashape", "delvor"))
source(paste("speed_test_", test,".R",sep=""))
# performs all the speed test scripts
print("PERFORMING SPEED TESTS")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
for(test in c("ahull", "complement", "ashape", "delvor"))
source(paste("speed_test_", test,".R",sep=""))
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
# lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
# lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
lines(n.nodes[1:N], n.nodes*log(n.nodes))[1:N], col = "green", lty = 2)
# lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
# lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
lines(n.nodes[1:N], (n.nodes*log(n.nodes)))[1:N], col = "green", lty = 2)
# lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
# lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
lines(n.nodes[1:N], n.nodes[1:N]*log(n.nodes[1:N]), col = "green", lty = 2)
# lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
# lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
lines(n.nodes[1:N], 0.0001*n.nodes[1:N]*log(n.nodes[1:N]), col = "green", lty = 2)
# lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
# lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
lines(n.nodes[1:N], 0.000000000000001*n.nodes[1:N]*log(n.nodes[1:N]), col = "green", lty = 2)
fit.cpp$coefficients
fit.cpp$coefficients[2]
legend("topleft", legend = c("C++", "R", paste(fit.cpp$coefficients[2],"nlogn",sep="*")), fill = c("blue", "red", "green"), )
# Federico Airoldi    matricola: 892377   codice persona: 10484065
#
# this script tests the performances of the package alphahull with respect to the
# performances of the R/C++ hybrid package RcppAlphahull
#
# by setting a different number of sites the scripr compute the Voronoi diagram and
# Delanuay tesselation of n randomized point of R2 in [0;1]x[0;1] (if one likes, he
# can change the seed)
require(rbenchmark)
require(alphahull)
require(RcppAlphahull)
if( getwd()!=dirname(rstudioapi::getActiveDocumentContext()$path) )
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
print("TESTING SPEED OF DELVOR")
set.seed(123)
n.nodes = c( seq(100,900,by=100),
seq(1000,9000,by=1000))
relative = c()
RTime = c()
CppTime = c()
for(n in n.nodes){
if(n%%50==0) print(paste("Simulation:",n))
x = runif(n)
y = runif(n)
res = benchmark("Cpp" = RcppAlphahull::delvor(x, y), "R" = alphahull::delvor(x, y), replications = 1)
CppTime = rbind(CppTime, res[which(res[,"test"] == "Cpp"), c("elapsed", "user.self", "sys.self")])
RTime = rbind(RTime, res[which(res[,"test"] == "R"), c("elapsed", "user.self", "sys.self")])
relative = c(relative, res[which(res[,"test"] == "R"), c("relative")])
}
tmp = cbind(CppTime, RTime)
Cpp.User = tmp[,2]
R.User = tmp[,5]
transfCpp = n.nodes*log(n.nodes, 2)
transfR = (n.nodes*log(n.nodes, 2))^2
fit.cpp = lm(Cpp.User ~ transfCpp)
summary(fit.cpp)
fit.R = lm(R.User ~ transfR)
summary(fit.R)
if(!dir.exists("img")) dir.create("img")
N = 15
x11()
tiff("img/speed_delvor.tiff")
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"), )
graphics.off()
R.User/Cpp.User
# Federico Airoldi    matricola: 892377   codice persona: 10484065
#
# this script tests the performances of the package alphahull with respect to the
# performances of the R/C++ hybrid package RcppAlphahull
#
# by setting a different number of sites the scripr compute the Voronoi diagram and
# Delanuay tesselation of n randomized point of R2 in [0;1]x[0;1] (if one likes, he
# can change the seed)
require(rbenchmark)
require(alphahull)
require(RcppAlphahull)
if( getwd()!=dirname(rstudioapi::getActiveDocumentContext()$path) )
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
print("TESTING SPEED OF DELVOR")
set.seed(123)
n.nodes = c( seq(100,900,by=100),
seq(1000,9000,by=1000))
relative = c()
RTime = c()
CppTime = c()
for(n in n.nodes){
if(n%%50==0) print(paste("Simulation:",n))
x = runif(n)
y = runif(n)
res = benchmark("Cpp" = RcppAlphahull::delvor(x, y), "R" = alphahull::delvor(x, y), replications = 1)
CppTime = rbind(CppTime, res[which(res[,"test"] == "Cpp"), c("elapsed", "user.self", "sys.self")])
RTime = rbind(RTime, res[which(res[,"test"] == "R"), c("elapsed", "user.self", "sys.self")])
relative = c(relative, res[which(res[,"test"] == "R"), c("relative")])
}
tmp = cbind(CppTime, RTime)
Cpp.User = tmp[,2]
R.User = tmp[,5]
transfCpp = n.nodes*log(n.nodes, 2)
transfR = (n.nodes*log(n.nodes, 2))^2
fit.cpp = lm(Cpp.User ~ transfCpp)
summary(fit.cpp)
fit.R = lm(R.User ~ transfR)
summary(fit.R)
if(!dir.exists("img")) dir.create("img")
N = 15
x11()
tiff("img/speed_delvor.tiff")
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"), )
graphics.off()
R.User/Cpp.User
tiff("img/speed_delvor.tiff")
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"), )
graphics.off()
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"), )
Cpp.User = tmp[,2]
R.User = tmp[,5]
transfCpp = n.nodes*log(n.nodes, 2)
transfR = (n.nodes*log(n.nodes, 2))^2
fit.cpp = lm(Cpp.User ~ transfCpp)
summary(fit.cpp)
fit.R = lm(R.User ~ transfCpp)
summary(fit.R)
if(!dir.exists("img")) dir.create("img")
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"), )
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"))
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"))
n
n.nodes
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"))
N = 18
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"))
Cpp.User = tmp[,2]
R.User = tmp[,5]
transfCpp = n.nodes*log(n.nodes, 2)
transfR = (n.nodes*log(n.nodes, 2))^2
fit.cpp = lm(Cpp.User ~ transfCpp)
summary(fit.cpp)
fit.R = lm(R.User ~ transfR)
summary(fit.R)
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "nlogn"), fill = c("blue", "red", "green"))
summary(fit.R)
fit.R = lm(R.User ~ transfCpp)
summary(fit.R)
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "lm fit C++", "lm fit R"), fill = c("blue", "red", "green"))
legend("topleft", legend = c("C++", "R", "lm fit C++", "lm fit R"), fill = c("blue", "red", "green", "orange"))
R.User
Cpp.User
CppTime
RTime
n = 10
res = benchmark("Cpp" = RcppAlphahull::delvor(x, y), "R" = alphahull::delvor(x, y), replications = 3)
res
n.nodes = c( seq(100,900,by=100),
seq(1000,9000,by=1000),
seq(10000,60000,by=10000))
# performs all the speed test scripts
print("PERFORMING SPEED TESTS")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
for(test in c("ahull", "complement", "ashape", "delvor"))
source(paste("speed_test_", test,".R",sep=""))
n.nodes = seq(500,50000,by=500)
n.nodes = seq(500,10000,by=500)
n.nodes = seq(500,20000,by=500)
# performs all the speed test scripts
print("PERFORMING SPEED TESTS")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
for(test in c("ahull", "complement", "ashape", "delvor"))
source(paste("speed_test_", test,".R",sep=""))
# performs all the speed test scripts
print("PERFORMING SPEED TESTS")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
for(test in c("ahull", "complement", "ashape", "delvor"))
source(paste("speed_test_", test,".R",sep=""))
Cpp.User = tmp[,2]
R.User = tmp[,5]
transfCpp = n.nodes*log(n.nodes, 2)
transfR = (n.nodes*log(n.nodes, 2))^2
fit.cpp = lm(Cpp.User ~ transfCpp)
summary(fit.cpp)
fit.R = lm(R.User ~ transfCpp)
summary(fit.R)
if(!dir.exists("img")) dir.create("img")
N = 18
x11()
tiff("img/speed_delvor.tiff")
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "lm fit C++", "lm fit R"), fill = c("blue", "red", "green", "orange"))
graphics.off()
R.User/Cpp.User
N = 24
x11()
tiff("img/speed_delvor.tiff")
matplot(n.nodes[1:N], cbind(Cpp.User[1:N], R.User[1:N]), type = "l", col = c("blue", "red"), lty = 1,
xlab = "Number of nodes", ylab = "CPU time")
lines(n.nodes[1:N], fit.cpp$fitted.values[1:N], col = "green", lty = 2)
lines(n.nodes[1:N], fit.R$fitted.values[1:N], col = "orange", lty = 2)
legend("topleft", legend = c("C++", "R", "lm fit C++", "lm fit R"), fill = c("blue", "red", "green", "orange"))
graphics.off()
R.User/Cpp.User
