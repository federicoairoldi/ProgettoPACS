help(tri.mesh)
library(alphahull)
install.packages("alphahull")
library(alphahull)
a <- matrix(c(0.5,0.1,0.1,0.5),nrow=2)
u <- matrix(rnorm(10000),ncol=2)
## Letâ€™s start with the R version
rSim <- function(coeff, errors) {
simdata <- matrix(0, nrow(errors), ncol(errors))
for (row in 2:nrow(errors)) {
simdata[row,] = coeff %*% simdata[(row-1),] + errors[row,]
}
return(simdata)
}
rData <- rSim(a, u)
code <- '
arma::mat coeff = Rcpp::as<arma::mat>(a);
arma::mat errors = Rcpp::as<arma::mat>(u);
int m = errors.n_rows;
int n = errors.n_cols;
arma::mat simdata(m,n);
simdata.row(0) = arma::zeros<arma::mat>(1,n);
for (int row=1; row<m; row++) {
simdata.row(row) = simdata.row(row-1)*trans(coeff)
+ errors.row(row);
}
return Rcpp::wrap(simdata);
'
rcppSim <- cxxfunction(signature(a="numeric",u="numeric"),
code,plugin="RcppArmadillo")
library(inline)
install.packages("inline")
library(inline)
rcppSim <- cxxfunction(signature(a="numeric",u="numeric"),
code,plugin="RcppArmadillo")
install.packages("RcppArmadillo")
rcppSim <- cxxfunction(signature(a="numeric",u="numeric"),
code,plugin="RcppArmadillo")
rcppData <- rcppSim(a,u)
install.packages("rbenchmark")
library(rbenchmark)
res <- benchmark(rcppSim(a,e),
rSim(a,e),
compRsim(a,e),
columns=c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"),
order="relative")
res <- benchmark(rcppSim(a,u),
rSim(a,u),
compRsim(a,u),
columns=c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"),
order="relative")
compRsim = cmpfun(rSim)
library(compiler)
compRsim = cmpfun(rSim)
res <- benchmark(rcppSim(a,u),
rSim(a,u),
compRsim(a,u),
columns=c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"),
order="relative")
res
res
res <- benchmark(rcppSim(a,u),
rSim(a,u),
compRsim(a,u),
columns=c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"),
order="relative")
res
configure
setwd("~/Dropbox/Alpha-hulls/FortuneAlgorithm-master/src")
aaa = sourceCpp("MYTRY.cpp")
library(Rcpp)
aaa = sourceCpp("MYTRY.cpp")
aaa = sourceCpp("MYTRY.cpp")
vor()
aaa = sourceCpp("MYTRY.cpp")
vor()
vor(6)
vor(100)
vor(1000)
vor(100000)
